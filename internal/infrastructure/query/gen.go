// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Approval      *approval
	ApprovalScope *approvalScope
	AuthCode      *authCode
	AuthCodeScope *authCodeScope
	Client        *client
	RedirectURI   *redirectURI
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Approval = &Q.Approval
	ApprovalScope = &Q.ApprovalScope
	AuthCode = &Q.AuthCode
	AuthCodeScope = &Q.AuthCodeScope
	Client = &Q.Client
	RedirectURI = &Q.RedirectURI
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Approval:      newApproval(db, opts...),
		ApprovalScope: newApprovalScope(db, opts...),
		AuthCode:      newAuthCode(db, opts...),
		AuthCodeScope: newAuthCodeScope(db, opts...),
		Client:        newClient(db, opts...),
		RedirectURI:   newRedirectURI(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Approval      approval
	ApprovalScope approvalScope
	AuthCode      authCode
	AuthCodeScope authCodeScope
	Client        client
	RedirectURI   redirectURI
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Approval:      q.Approval.clone(db),
		ApprovalScope: q.ApprovalScope.clone(db),
		AuthCode:      q.AuthCode.clone(db),
		AuthCodeScope: q.AuthCodeScope.clone(db),
		Client:        q.Client.clone(db),
		RedirectURI:   q.RedirectURI.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Approval:      q.Approval.replaceDB(db),
		ApprovalScope: q.ApprovalScope.replaceDB(db),
		AuthCode:      q.AuthCode.replaceDB(db),
		AuthCodeScope: q.AuthCodeScope.replaceDB(db),
		Client:        q.Client.replaceDB(db),
		RedirectURI:   q.RedirectURI.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Approval      IApprovalDo
	ApprovalScope IApprovalScopeDo
	AuthCode      IAuthCodeDo
	AuthCodeScope IAuthCodeScopeDo
	Client        IClientDo
	RedirectURI   IRedirectURIDo
	User          IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Approval:      q.Approval.WithContext(ctx),
		ApprovalScope: q.ApprovalScope.WithContext(ctx),
		AuthCode:      q.AuthCode.WithContext(ctx),
		AuthCodeScope: q.AuthCodeScope.WithContext(ctx),
		Client:        q.Client.WithContext(ctx),
		RedirectURI:   q.RedirectURI.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
