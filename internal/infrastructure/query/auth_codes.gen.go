// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"auth/internal/infrastructure/model"
)

func newAuthCode(db *gorm.DB, opts ...gen.DOOption) authCode {
	_authCode := authCode{}

	_authCode.authCodeDo.UseDB(db, opts...)
	_authCode.authCodeDo.UseModel(&model.AuthCode{})

	tableName := _authCode.authCodeDo.TableName()
	_authCode.ALL = field.NewAsterisk(tableName)
	_authCode.ID = field.NewInt64(tableName, "id")
	_authCode.Value = field.NewString(tableName, "value")
	_authCode.ClientID = field.NewString(tableName, "client_id")
	_authCode.UserID = field.NewInt64(tableName, "user_id")
	_authCode.RedirectURI = field.NewString(tableName, "redirect_uri")
	_authCode.Used = field.NewBool(tableName, "used")
	_authCode.ExpiresAt = field.NewTime(tableName, "expires_at")
	_authCode.AuthTime = field.NewTime(tableName, "auth_time")
	_authCode.CreatedAt = field.NewTime(tableName, "created_at")
	_authCode.UpdatedAt = field.NewTime(tableName, "updated_at")

	_authCode.fillFieldMap()

	return _authCode
}

type authCode struct {
	authCodeDo

	ALL         field.Asterisk
	ID          field.Int64
	Value       field.String
	ClientID    field.String
	UserID      field.Int64
	RedirectURI field.String
	Used        field.Bool
	ExpiresAt   field.Time
	AuthTime    field.Time
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a authCode) Table(newTableName string) *authCode {
	a.authCodeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authCode) As(alias string) *authCode {
	a.authCodeDo.DO = *(a.authCodeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authCode) updateTableName(table string) *authCode {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Value = field.NewString(table, "value")
	a.ClientID = field.NewString(table, "client_id")
	a.UserID = field.NewInt64(table, "user_id")
	a.RedirectURI = field.NewString(table, "redirect_uri")
	a.Used = field.NewBool(table, "used")
	a.ExpiresAt = field.NewTime(table, "expires_at")
	a.AuthTime = field.NewTime(table, "auth_time")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *authCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authCode) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["value"] = a.Value
	a.fieldMap["client_id"] = a.ClientID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["redirect_uri"] = a.RedirectURI
	a.fieldMap["used"] = a.Used
	a.fieldMap["expires_at"] = a.ExpiresAt
	a.fieldMap["auth_time"] = a.AuthTime
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a authCode) clone(db *gorm.DB) authCode {
	a.authCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authCode) replaceDB(db *gorm.DB) authCode {
	a.authCodeDo.ReplaceDB(db)
	return a
}

type authCodeDo struct{ gen.DO }

type IAuthCodeDo interface {
	gen.SubQuery
	Debug() IAuthCodeDo
	WithContext(ctx context.Context) IAuthCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthCodeDo
	WriteDB() IAuthCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthCodeDo
	Not(conds ...gen.Condition) IAuthCodeDo
	Or(conds ...gen.Condition) IAuthCodeDo
	Select(conds ...field.Expr) IAuthCodeDo
	Where(conds ...gen.Condition) IAuthCodeDo
	Order(conds ...field.Expr) IAuthCodeDo
	Distinct(cols ...field.Expr) IAuthCodeDo
	Omit(cols ...field.Expr) IAuthCodeDo
	Join(table schema.Tabler, on ...field.Expr) IAuthCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthCodeDo
	Group(cols ...field.Expr) IAuthCodeDo
	Having(conds ...gen.Condition) IAuthCodeDo
	Limit(limit int) IAuthCodeDo
	Offset(offset int) IAuthCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthCodeDo
	Unscoped() IAuthCodeDo
	Create(values ...*model.AuthCode) error
	CreateInBatches(values []*model.AuthCode, batchSize int) error
	Save(values ...*model.AuthCode) error
	First() (*model.AuthCode, error)
	Take() (*model.AuthCode, error)
	Last() (*model.AuthCode, error)
	Find() ([]*model.AuthCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthCode, err error)
	FindInBatches(result *[]*model.AuthCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthCodeDo
	Assign(attrs ...field.AssignExpr) IAuthCodeDo
	Joins(fields ...field.RelationField) IAuthCodeDo
	Preload(fields ...field.RelationField) IAuthCodeDo
	FirstOrInit() (*model.AuthCode, error)
	FirstOrCreate() (*model.AuthCode, error)
	FindByPage(offset int, limit int) (result []*model.AuthCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authCodeDo) Debug() IAuthCodeDo {
	return a.withDO(a.DO.Debug())
}

func (a authCodeDo) WithContext(ctx context.Context) IAuthCodeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authCodeDo) ReadDB() IAuthCodeDo {
	return a.Clauses(dbresolver.Read)
}

func (a authCodeDo) WriteDB() IAuthCodeDo {
	return a.Clauses(dbresolver.Write)
}

func (a authCodeDo) Session(config *gorm.Session) IAuthCodeDo {
	return a.withDO(a.DO.Session(config))
}

func (a authCodeDo) Clauses(conds ...clause.Expression) IAuthCodeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authCodeDo) Returning(value interface{}, columns ...string) IAuthCodeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authCodeDo) Not(conds ...gen.Condition) IAuthCodeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authCodeDo) Or(conds ...gen.Condition) IAuthCodeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authCodeDo) Select(conds ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authCodeDo) Where(conds ...gen.Condition) IAuthCodeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authCodeDo) Order(conds ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authCodeDo) Distinct(cols ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authCodeDo) Omit(cols ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authCodeDo) Join(table schema.Tabler, on ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authCodeDo) Group(cols ...field.Expr) IAuthCodeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authCodeDo) Having(conds ...gen.Condition) IAuthCodeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authCodeDo) Limit(limit int) IAuthCodeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authCodeDo) Offset(offset int) IAuthCodeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthCodeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authCodeDo) Unscoped() IAuthCodeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authCodeDo) Create(values ...*model.AuthCode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authCodeDo) CreateInBatches(values []*model.AuthCode, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authCodeDo) Save(values ...*model.AuthCode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authCodeDo) First() (*model.AuthCode, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCode), nil
	}
}

func (a authCodeDo) Take() (*model.AuthCode, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCode), nil
	}
}

func (a authCodeDo) Last() (*model.AuthCode, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCode), nil
	}
}

func (a authCodeDo) Find() ([]*model.AuthCode, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthCode), err
}

func (a authCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthCode, err error) {
	buf := make([]*model.AuthCode, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authCodeDo) FindInBatches(result *[]*model.AuthCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authCodeDo) Attrs(attrs ...field.AssignExpr) IAuthCodeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authCodeDo) Assign(attrs ...field.AssignExpr) IAuthCodeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authCodeDo) Joins(fields ...field.RelationField) IAuthCodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authCodeDo) Preload(fields ...field.RelationField) IAuthCodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authCodeDo) FirstOrInit() (*model.AuthCode, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCode), nil
	}
}

func (a authCodeDo) FirstOrCreate() (*model.AuthCode, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCode), nil
	}
}

func (a authCodeDo) FindByPage(offset int, limit int) (result []*model.AuthCode, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authCodeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authCodeDo) Delete(models ...*model.AuthCode) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authCodeDo) withDO(do gen.Dao) *authCodeDo {
	a.DO = *do.(*gen.DO)
	return a
}
