// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"auth/internal/infrastructure/model"
)

func newAuthCodeScope(db *gorm.DB, opts ...gen.DOOption) authCodeScope {
	_authCodeScope := authCodeScope{}

	_authCodeScope.authCodeScopeDo.UseDB(db, opts...)
	_authCodeScope.authCodeScopeDo.UseModel(&model.AuthCodeScope{})

	tableName := _authCodeScope.authCodeScopeDo.TableName()
	_authCodeScope.ALL = field.NewAsterisk(tableName)
	_authCodeScope.ScopeID = field.NewInt32(tableName, "scope_id")
	_authCodeScope.AuthCodeID = field.NewInt64(tableName, "auth_code_id")
	_authCodeScope.CreatedAt = field.NewTime(tableName, "created_at")
	_authCodeScope.UpdatedAt = field.NewTime(tableName, "updated_at")

	_authCodeScope.fillFieldMap()

	return _authCodeScope
}

type authCodeScope struct {
	authCodeScopeDo

	ALL        field.Asterisk
	ScopeID    field.Int32
	AuthCodeID field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (a authCodeScope) Table(newTableName string) *authCodeScope {
	a.authCodeScopeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authCodeScope) As(alias string) *authCodeScope {
	a.authCodeScopeDo.DO = *(a.authCodeScopeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authCodeScope) updateTableName(table string) *authCodeScope {
	a.ALL = field.NewAsterisk(table)
	a.ScopeID = field.NewInt32(table, "scope_id")
	a.AuthCodeID = field.NewInt64(table, "auth_code_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *authCodeScope) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authCodeScope) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["scope_id"] = a.ScopeID
	a.fieldMap["auth_code_id"] = a.AuthCodeID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a authCodeScope) clone(db *gorm.DB) authCodeScope {
	a.authCodeScopeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authCodeScope) replaceDB(db *gorm.DB) authCodeScope {
	a.authCodeScopeDo.ReplaceDB(db)
	return a
}

type authCodeScopeDo struct{ gen.DO }

type IAuthCodeScopeDo interface {
	gen.SubQuery
	Debug() IAuthCodeScopeDo
	WithContext(ctx context.Context) IAuthCodeScopeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthCodeScopeDo
	WriteDB() IAuthCodeScopeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthCodeScopeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthCodeScopeDo
	Not(conds ...gen.Condition) IAuthCodeScopeDo
	Or(conds ...gen.Condition) IAuthCodeScopeDo
	Select(conds ...field.Expr) IAuthCodeScopeDo
	Where(conds ...gen.Condition) IAuthCodeScopeDo
	Order(conds ...field.Expr) IAuthCodeScopeDo
	Distinct(cols ...field.Expr) IAuthCodeScopeDo
	Omit(cols ...field.Expr) IAuthCodeScopeDo
	Join(table schema.Tabler, on ...field.Expr) IAuthCodeScopeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthCodeScopeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthCodeScopeDo
	Group(cols ...field.Expr) IAuthCodeScopeDo
	Having(conds ...gen.Condition) IAuthCodeScopeDo
	Limit(limit int) IAuthCodeScopeDo
	Offset(offset int) IAuthCodeScopeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthCodeScopeDo
	Unscoped() IAuthCodeScopeDo
	Create(values ...*model.AuthCodeScope) error
	CreateInBatches(values []*model.AuthCodeScope, batchSize int) error
	Save(values ...*model.AuthCodeScope) error
	First() (*model.AuthCodeScope, error)
	Take() (*model.AuthCodeScope, error)
	Last() (*model.AuthCodeScope, error)
	Find() ([]*model.AuthCodeScope, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthCodeScope, err error)
	FindInBatches(result *[]*model.AuthCodeScope, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthCodeScope) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthCodeScopeDo
	Assign(attrs ...field.AssignExpr) IAuthCodeScopeDo
	Joins(fields ...field.RelationField) IAuthCodeScopeDo
	Preload(fields ...field.RelationField) IAuthCodeScopeDo
	FirstOrInit() (*model.AuthCodeScope, error)
	FirstOrCreate() (*model.AuthCodeScope, error)
	FindByPage(offset int, limit int) (result []*model.AuthCodeScope, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthCodeScopeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authCodeScopeDo) Debug() IAuthCodeScopeDo {
	return a.withDO(a.DO.Debug())
}

func (a authCodeScopeDo) WithContext(ctx context.Context) IAuthCodeScopeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authCodeScopeDo) ReadDB() IAuthCodeScopeDo {
	return a.Clauses(dbresolver.Read)
}

func (a authCodeScopeDo) WriteDB() IAuthCodeScopeDo {
	return a.Clauses(dbresolver.Write)
}

func (a authCodeScopeDo) Session(config *gorm.Session) IAuthCodeScopeDo {
	return a.withDO(a.DO.Session(config))
}

func (a authCodeScopeDo) Clauses(conds ...clause.Expression) IAuthCodeScopeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authCodeScopeDo) Returning(value interface{}, columns ...string) IAuthCodeScopeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authCodeScopeDo) Not(conds ...gen.Condition) IAuthCodeScopeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authCodeScopeDo) Or(conds ...gen.Condition) IAuthCodeScopeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authCodeScopeDo) Select(conds ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authCodeScopeDo) Where(conds ...gen.Condition) IAuthCodeScopeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authCodeScopeDo) Order(conds ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authCodeScopeDo) Distinct(cols ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authCodeScopeDo) Omit(cols ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authCodeScopeDo) Join(table schema.Tabler, on ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authCodeScopeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authCodeScopeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authCodeScopeDo) Group(cols ...field.Expr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authCodeScopeDo) Having(conds ...gen.Condition) IAuthCodeScopeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authCodeScopeDo) Limit(limit int) IAuthCodeScopeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authCodeScopeDo) Offset(offset int) IAuthCodeScopeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authCodeScopeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthCodeScopeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authCodeScopeDo) Unscoped() IAuthCodeScopeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authCodeScopeDo) Create(values ...*model.AuthCodeScope) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authCodeScopeDo) CreateInBatches(values []*model.AuthCodeScope, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authCodeScopeDo) Save(values ...*model.AuthCodeScope) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authCodeScopeDo) First() (*model.AuthCodeScope, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCodeScope), nil
	}
}

func (a authCodeScopeDo) Take() (*model.AuthCodeScope, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCodeScope), nil
	}
}

func (a authCodeScopeDo) Last() (*model.AuthCodeScope, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCodeScope), nil
	}
}

func (a authCodeScopeDo) Find() ([]*model.AuthCodeScope, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthCodeScope), err
}

func (a authCodeScopeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthCodeScope, err error) {
	buf := make([]*model.AuthCodeScope, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authCodeScopeDo) FindInBatches(result *[]*model.AuthCodeScope, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authCodeScopeDo) Attrs(attrs ...field.AssignExpr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authCodeScopeDo) Assign(attrs ...field.AssignExpr) IAuthCodeScopeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authCodeScopeDo) Joins(fields ...field.RelationField) IAuthCodeScopeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authCodeScopeDo) Preload(fields ...field.RelationField) IAuthCodeScopeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authCodeScopeDo) FirstOrInit() (*model.AuthCodeScope, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCodeScope), nil
	}
}

func (a authCodeScopeDo) FirstOrCreate() (*model.AuthCodeScope, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthCodeScope), nil
	}
}

func (a authCodeScopeDo) FindByPage(offset int, limit int) (result []*model.AuthCodeScope, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authCodeScopeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authCodeScopeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authCodeScopeDo) Delete(models ...*model.AuthCodeScope) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authCodeScopeDo) withDO(do gen.Dao) *authCodeScopeDo {
	a.DO = *do.(*gen.DO)
	return a
}
