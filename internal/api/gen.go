// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ApprovalsApproveErr.
const (
	ApprovalsApproveErrInvalidClient ApprovalsApproveErr = "invalid_client"
	ApprovalsApproveErrInvalidScope  ApprovalsApproveErr = "invalid_scope"
)

// Defines values for ClientsGetClientErr.
const (
	ClientNotFound ClientsGetClientErr = "client_not_found"
)

// Defines values for OAuthAuthorizeErr.
const (
	OAuthAuthorizeErrAccessDenied            OAuthAuthorizeErr = "access_denied"
	OAuthAuthorizeErrInvalidRequest          OAuthAuthorizeErr = "invalid_request"
	OAuthAuthorizeErrInvalidScope            OAuthAuthorizeErr = "invalid_scope"
	OAuthAuthorizeErrServerError             OAuthAuthorizeErr = "server_error"
	OAuthAuthorizeErrTemporarilyUnavailable  OAuthAuthorizeErr = "temporarily_unavailable"
	OAuthAuthorizeErrUnauthorizedClient      OAuthAuthorizeErr = "unauthorized_client"
	OAuthAuthorizeErrUnsupportedResponseType OAuthAuthorizeErr = "unsupported_response_type"
)

// Defines values for SessionLoginErr.
const (
	InvalidNameOrPassword SessionLoginErr = "invalid_name_or_password"
)

// Defines values for SessionLogoutErr.
const (
	NotLoggedIn SessionLogoutErr = "not_logged_in"
)

// Defines values for UsersSignupErr.
const (
	NameAlreadyUsed              UsersSignupErr = "name_already_used"
	NameLengthNotEnough          UsersSignupErr = "name_length_not_enough"
	PasswordConfirmationNotMatch UsersSignupErr = "password_confirmation_not_match"
	PasswordLengthNotEnough      UsersSignupErr = "password_length_not_enough"
)

// ApprovalsApproveErr defines model for Approvals.ApproveErr.
type ApprovalsApproveErr string

// ApprovalsApproveReq defines model for Approvals.ApproveReq.
type ApprovalsApproveReq struct {
	ClientId string `json:"client_id"`
	Scope    string `json:"scope"`
}

// Client defines model for Client.
type Client struct {
	Id           string   `json:"id"`
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientCreate defines model for ClientCreate.
type ClientCreate struct {
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientsGetClientErr defines model for Clients.GetClientErr.
type ClientsGetClientErr string

// ClientsGetClientRes defines model for Clients.GetClientRes.
type ClientsGetClientRes struct {
	Client PublicClient `json:"client"`
}

// OAuthAuthorizeErr defines model for OAuth.AuthorizeErr.
type OAuthAuthorizeErr string

// OAuthAuthorizeReqMultiPart defines model for OAuth.AuthorizeReqMultiPart.
type OAuthAuthorizeReqMultiPart struct {
	ClientId     string  `json:"client_id"`
	RedirectUri  string  `json:"redirect_uri"`
	ResponseType string  `json:"response_type"`
	Scope        string  `json:"scope"`
	State        *string `json:"state,omitempty"`
}

// PublicClient defines model for PublicClient.
type PublicClient struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// SessionLoginErr defines model for Session.LoginErr.
type SessionLoginErr string

// SessionLoginReq defines model for Session.LoginReq.
type SessionLoginReq struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// SessionLogoutErr defines model for Session.LogoutErr.
type SessionLogoutErr string

// SessionMeRes defines model for Session.MeRes.
type SessionMeRes struct {
	User *User `json:"user"`
}

// User defines model for User.
type User struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// UsersReqSignup defines model for Users.ReqSignup.
type UsersReqSignup struct {
	Name                 string `json:"name"`
	Password             string `json:"password"`
	PasswordConfirmation string `json:"password_confirmation"`
}

// UsersSignupErr defines model for Users.SignupErr.
type UsersSignupErr string

// AccountClientsListClientsParams defines parameters for AccountClientsListClients.
type AccountClientsListClientsParams struct {
	Cookie string `json:"cookie"`
}

// AccountClientsCreateClientJSONBody defines parameters for AccountClientsCreateClient.
type AccountClientsCreateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// AccountClientsUpdateClientJSONBody defines parameters for AccountClientsUpdateClient.
type AccountClientsUpdateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// OAuthInterfaceAuthorizeParams defines parameters for OAuthInterfaceAuthorize.
type OAuthInterfaceAuthorizeParams struct {
	ResponseType string  `form:"response_type" json:"response_type"`
	ClientId     string  `form:"client_id" json:"client_id"`
	RedirectUri  string  `form:"redirect_uri" json:"redirect_uri"`
	Scope        string  `form:"scope" json:"scope"`
	State        *string `form:"state,omitempty" json:"state,omitempty"`
}

// OAuthInterfaceGetTokenJSONBody defines parameters for OAuthInterfaceGetToken.
type OAuthInterfaceGetTokenJSONBody struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

// ApprovalsInterfaceApproveJSONRequestBody defines body for ApprovalsInterfaceApprove for application/json ContentType.
type ApprovalsInterfaceApproveJSONRequestBody = ApprovalsApproveReq

// AccountClientsCreateClientJSONRequestBody defines body for AccountClientsCreateClient for application/json ContentType.
type AccountClientsCreateClientJSONRequestBody AccountClientsCreateClientJSONBody

// AccountClientsUpdateClientJSONRequestBody defines body for AccountClientsUpdateClient for application/json ContentType.
type AccountClientsUpdateClientJSONRequestBody AccountClientsUpdateClientJSONBody

// OAuthInterfacePostAuthorizeMultipartRequestBody defines body for OAuthInterfacePostAuthorize for multipart/form-data ContentType.
type OAuthInterfacePostAuthorizeMultipartRequestBody = OAuthAuthorizeReqMultiPart

// OAuthInterfaceGetTokenJSONRequestBody defines body for OAuthInterfaceGetToken for application/json ContentType.
type OAuthInterfaceGetTokenJSONRequestBody OAuthInterfaceGetTokenJSONBody

// SessionInterfaceLoginJSONRequestBody defines body for SessionInterfaceLogin for application/json ContentType.
type SessionInterfaceLoginJSONRequestBody = SessionLoginReq

// UsersInterfaceSignupJSONRequestBody defines body for UsersInterfaceSignup for application/json ContentType.
type UsersInterfaceSignupJSONRequestBody = UsersReqSignup

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx echo.Context) error
	// Get all clients
	// (GET /account/clients)
	AccountClientsListClients(ctx echo.Context, params AccountClientsListClientsParams) error
	// Create a new client
	// (POST /account/clients)
	AccountClientsCreateClient(ctx echo.Context) error
	// Delete a client
	// (DELETE /account/clients:id/{id})
	AccountClientsDeleteClient(ctx echo.Context, id int64) error
	// Update a client
	// (POST /account/clients:id/{id})
	AccountClientsUpdateClient(ctx echo.Context, id int64) error
	// Get a client
	// (GET /clients/{id})
	ClientsInterfaceGetClient(ctx echo.Context, id string) error
	// Check health
	// (GET /healthz)
	HealthzCheck(ctx echo.Context) error
	// Authorization Request
	// (GET /oauth/authorize)
	OAuthInterfaceAuthorize(ctx echo.Context, params OAuthInterfaceAuthorizeParams) error
	// Authorization Request
	// (POST /oauth/authorize)
	OAuthInterfacePostAuthorize(ctx echo.Context) error
	// Get a token
	// (POST /oauth/token)
	OAuthInterfaceGetToken(ctx echo.Context) error
	// Logout
	// (DELETE /session)
	SessionInterfaceLogout(ctx echo.Context) error
	// Get session
	// (GET /session)
	SessionInterfaceMe(ctx echo.Context) error
	// Login
	// (POST /session)
	SessionInterfaceLogin(ctx echo.Context) error
	// Signup
	// (POST /users/signup)
	UsersInterfaceSignup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApprovalsInterfaceApprove converts echo context to params.
func (w *ServerInterfaceWrapper) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApprovalsInterfaceApprove(ctx)
	return err
}

// AccountClientsListClients converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsListClients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountClientsListClientsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for cookie, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "cookie", valueList[0], &Cookie, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cookie: %s", err))
		}

		params.Cookie = Cookie
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter cookie is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsListClients(ctx, params)
	return err
}

// AccountClientsCreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsCreateClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsCreateClient(ctx)
	return err
}

// AccountClientsDeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsDeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsDeleteClient(ctx, id)
	return err
}

// AccountClientsUpdateClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsUpdateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsUpdateClient(ctx, id)
	return err
}

// ClientsInterfaceGetClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientsInterfaceGetClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientsInterfaceGetClient(ctx, id)
	return err
}

// HealthzCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthzCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthzCheck(ctx)
	return err
}

// OAuthInterfaceAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceAuthorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OAuthInterfaceAuthorizeParams
	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", false, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", false, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", false, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceAuthorize(ctx, params)
	return err
}

// OAuthInterfacePostAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfacePostAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfacePostAuthorize(ctx)
	return err
}

// OAuthInterfaceGetToken converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceGetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceGetToken(ctx)
	return err
}

// SessionInterfaceLogout converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceLogout(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceLogout(ctx)
	return err
}

// SessionInterfaceMe converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceMe(ctx)
	return err
}

// SessionInterfaceLogin converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceLogin(ctx)
	return err
}

// UsersInterfaceSignup converts echo context to params.
func (w *ServerInterfaceWrapper) UsersInterfaceSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersInterfaceSignup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/account/approvals", wrapper.ApprovalsInterfaceApprove)
	router.GET(baseURL+"/account/clients", wrapper.AccountClientsListClients)
	router.POST(baseURL+"/account/clients", wrapper.AccountClientsCreateClient)
	router.DELETE(baseURL+"/account/clients:id/:id", wrapper.AccountClientsDeleteClient)
	router.POST(baseURL+"/account/clients:id/:id", wrapper.AccountClientsUpdateClient)
	router.GET(baseURL+"/clients/:id", wrapper.ClientsInterfaceGetClient)
	router.GET(baseURL+"/healthz", wrapper.HealthzCheck)
	router.GET(baseURL+"/oauth/authorize", wrapper.OAuthInterfaceAuthorize)
	router.POST(baseURL+"/oauth/authorize", wrapper.OAuthInterfacePostAuthorize)
	router.POST(baseURL+"/oauth/token", wrapper.OAuthInterfaceGetToken)
	router.DELETE(baseURL+"/session", wrapper.SessionInterfaceLogout)
	router.GET(baseURL+"/session", wrapper.SessionInterfaceMe)
	router.POST(baseURL+"/session", wrapper.SessionInterfaceLogin)
	router.POST(baseURL+"/users/signup", wrapper.UsersInterfaceSignup)

}

type ApprovalsInterfaceApproveRequestObject struct {
	Body *ApprovalsInterfaceApproveJSONRequestBody
}

type ApprovalsInterfaceApproveResponseObject interface {
	VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error
}

type ApprovalsInterfaceApprove204Response struct {
}

func (response ApprovalsInterfaceApprove204Response) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApprovalsInterfaceApprove400JSONResponse struct {
	Error            ApprovalsApproveErr `json:"error"`
	ErrorDescription string              `json:"error_description"`
}

func (response ApprovalsInterfaceApprove400JSONResponse) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsListClientsRequestObject struct {
	Params AccountClientsListClientsParams
}

type AccountClientsListClientsResponseObject interface {
	VisitAccountClientsListClientsResponse(w http.ResponseWriter) error
}

type AccountClientsListClients200JSONResponse struct {
	Clients []Client `json:"clients"`
}

func (response AccountClientsListClients200JSONResponse) VisitAccountClientsListClientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsCreateClientRequestObject struct {
	Body *AccountClientsCreateClientJSONRequestBody
}

type AccountClientsCreateClientResponseObject interface {
	VisitAccountClientsCreateClientResponse(w http.ResponseWriter) error
}

type AccountClientsCreateClient201JSONResponse struct {
	Client Client `json:"client"`
}

func (response AccountClientsCreateClient201JSONResponse) VisitAccountClientsCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsCreateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsCreateClient400JSONResponse) VisitAccountClientsCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsDeleteClientRequestObject struct {
	Id int64 `json:"id"`
}

type AccountClientsDeleteClientResponseObject interface {
	VisitAccountClientsDeleteClientResponse(w http.ResponseWriter) error
}

type AccountClientsDeleteClient204Response struct {
}

func (response AccountClientsDeleteClient204Response) VisitAccountClientsDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AccountClientsDeleteClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsDeleteClient400JSONResponse) VisitAccountClientsDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsUpdateClientRequestObject struct {
	Id   int64 `json:"id"`
	Body *AccountClientsUpdateClientJSONRequestBody
}

type AccountClientsUpdateClientResponseObject interface {
	VisitAccountClientsUpdateClientResponse(w http.ResponseWriter) error
}

type AccountClientsUpdateClient200JSONResponse struct {
	Client Client `json:"client"`
}

func (response AccountClientsUpdateClient200JSONResponse) VisitAccountClientsUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsUpdateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsUpdateClient400JSONResponse) VisitAccountClientsUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientsInterfaceGetClientRequestObject struct {
	Id string `json:"id"`
}

type ClientsInterfaceGetClientResponseObject interface {
	VisitClientsInterfaceGetClientResponse(w http.ResponseWriter) error
}

type ClientsInterfaceGetClient200JSONResponse ClientsGetClientRes

func (response ClientsInterfaceGetClient200JSONResponse) VisitClientsInterfaceGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientsInterfaceGetClient400JSONResponse struct {
	Error            ClientsGetClientErr `json:"error"`
	ErrorDescription string              `json:"error_description"`
}

func (response ClientsInterfaceGetClient400JSONResponse) VisitClientsInterfaceGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HealthzCheckRequestObject struct {
}

type HealthzCheckResponseObject interface {
	VisitHealthzCheckResponse(w http.ResponseWriter) error
}

type HealthzCheck200Response struct {
}

func (response HealthzCheck200Response) VisitHealthzCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OAuthInterfaceAuthorizeRequestObject struct {
	Params OAuthInterfaceAuthorizeParams
}

type OAuthInterfaceAuthorizeResponseObject interface {
	VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error
}

type OAuthInterfaceAuthorize204Response struct {
}

func (response OAuthInterfaceAuthorize204Response) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OAuthInterfaceAuthorize302ResponseHeaders struct {
	Location string
}

type OAuthInterfaceAuthorize302Response struct {
	Headers OAuthInterfaceAuthorize302ResponseHeaders
}

func (response OAuthInterfaceAuthorize302Response) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type OAuthInterfaceAuthorize400JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfaceAuthorize400JSONResponse) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfacePostAuthorizeRequestObject struct {
	Body *multipart.Reader
}

type OAuthInterfacePostAuthorizeResponseObject interface {
	VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error
}

type OAuthInterfacePostAuthorize204Response struct {
}

func (response OAuthInterfacePostAuthorize204Response) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OAuthInterfacePostAuthorize302ResponseHeaders struct {
	Location string
}

type OAuthInterfacePostAuthorize302Response struct {
	Headers OAuthInterfacePostAuthorize302ResponseHeaders
}

func (response OAuthInterfacePostAuthorize302Response) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type OAuthInterfacePostAuthorize400JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfacePostAuthorize400JSONResponse) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceGetTokenRequestObject struct {
	Body *OAuthInterfaceGetTokenJSONRequestBody
}

type OAuthInterfaceGetTokenResponseObject interface {
	VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error
}

type OAuthInterfaceGetToken200JSONResponse struct {
	Token string `json:"token"`
}

func (response OAuthInterfaceGetToken200JSONResponse) VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceGetToken400JSONResponse struct {
	Error            int32  `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response OAuthInterfaceGetToken400JSONResponse) VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceLogoutRequestObject struct {
}

type SessionInterfaceLogoutResponseObject interface {
	VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error
}

type SessionInterfaceLogout204ResponseHeaders struct {
	SetCookie string
}

type SessionInterfaceLogout204Response struct {
	Headers SessionInterfaceLogout204ResponseHeaders
}

func (response SessionInterfaceLogout204Response) VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type SessionInterfaceMeRequestObject struct {
}

type SessionInterfaceMeResponseObject interface {
	VisitSessionInterfaceMeResponse(w http.ResponseWriter) error
}

type SessionInterfaceMe200JSONResponse SessionMeRes

func (response SessionInterfaceMe200JSONResponse) VisitSessionInterfaceMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceLoginRequestObject struct {
	Body *SessionInterfaceLoginJSONRequestBody
}

type SessionInterfaceLoginResponseObject interface {
	VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error
}

type SessionInterfaceLogin204ResponseHeaders struct {
	SetCookie string
}

type SessionInterfaceLogin204Response struct {
	Headers SessionInterfaceLogin204ResponseHeaders
}

func (response SessionInterfaceLogin204Response) VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type SessionInterfaceLogin400JSONResponse struct {
	Error            SessionLoginErr `json:"error"`
	ErrorDescription string          `json:"error_description"`
}

func (response SessionInterfaceLogin400JSONResponse) VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UsersInterfaceSignupRequestObject struct {
	Body *UsersInterfaceSignupJSONRequestBody
}

type UsersInterfaceSignupResponseObject interface {
	VisitUsersInterfaceSignupResponse(w http.ResponseWriter) error
}

type UsersInterfaceSignup204ResponseHeaders struct {
	SetCookie string
}

type UsersInterfaceSignup204Response struct {
	Headers UsersInterfaceSignup204ResponseHeaders
}

func (response UsersInterfaceSignup204Response) VisitUsersInterfaceSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type UsersInterfaceSignup400JSONResponse struct {
	Error            UsersSignupErr `json:"error"`
	ErrorDescription string         `json:"error_description"`
}

func (response UsersInterfaceSignup400JSONResponse) VisitUsersInterfaceSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx context.Context, request ApprovalsInterfaceApproveRequestObject) (ApprovalsInterfaceApproveResponseObject, error)
	// Get all clients
	// (GET /account/clients)
	AccountClientsListClients(ctx context.Context, request AccountClientsListClientsRequestObject) (AccountClientsListClientsResponseObject, error)
	// Create a new client
	// (POST /account/clients)
	AccountClientsCreateClient(ctx context.Context, request AccountClientsCreateClientRequestObject) (AccountClientsCreateClientResponseObject, error)
	// Delete a client
	// (DELETE /account/clients:id/{id})
	AccountClientsDeleteClient(ctx context.Context, request AccountClientsDeleteClientRequestObject) (AccountClientsDeleteClientResponseObject, error)
	// Update a client
	// (POST /account/clients:id/{id})
	AccountClientsUpdateClient(ctx context.Context, request AccountClientsUpdateClientRequestObject) (AccountClientsUpdateClientResponseObject, error)
	// Get a client
	// (GET /clients/{id})
	ClientsInterfaceGetClient(ctx context.Context, request ClientsInterfaceGetClientRequestObject) (ClientsInterfaceGetClientResponseObject, error)
	// Check health
	// (GET /healthz)
	HealthzCheck(ctx context.Context, request HealthzCheckRequestObject) (HealthzCheckResponseObject, error)
	// Authorization Request
	// (GET /oauth/authorize)
	OAuthInterfaceAuthorize(ctx context.Context, request OAuthInterfaceAuthorizeRequestObject) (OAuthInterfaceAuthorizeResponseObject, error)
	// Authorization Request
	// (POST /oauth/authorize)
	OAuthInterfacePostAuthorize(ctx context.Context, request OAuthInterfacePostAuthorizeRequestObject) (OAuthInterfacePostAuthorizeResponseObject, error)
	// Get a token
	// (POST /oauth/token)
	OAuthInterfaceGetToken(ctx context.Context, request OAuthInterfaceGetTokenRequestObject) (OAuthInterfaceGetTokenResponseObject, error)
	// Logout
	// (DELETE /session)
	SessionInterfaceLogout(ctx context.Context, request SessionInterfaceLogoutRequestObject) (SessionInterfaceLogoutResponseObject, error)
	// Get session
	// (GET /session)
	SessionInterfaceMe(ctx context.Context, request SessionInterfaceMeRequestObject) (SessionInterfaceMeResponseObject, error)
	// Login
	// (POST /session)
	SessionInterfaceLogin(ctx context.Context, request SessionInterfaceLoginRequestObject) (SessionInterfaceLoginResponseObject, error)
	// Signup
	// (POST /users/signup)
	UsersInterfaceSignup(ctx context.Context, request UsersInterfaceSignupRequestObject) (UsersInterfaceSignupResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ApprovalsInterfaceApprove operation middleware
func (sh *strictHandler) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var request ApprovalsInterfaceApproveRequestObject

	var body ApprovalsInterfaceApproveJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApprovalsInterfaceApprove(ctx.Request().Context(), request.(ApprovalsInterfaceApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApprovalsInterfaceApprove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApprovalsInterfaceApproveResponseObject); ok {
		return validResponse.VisitApprovalsInterfaceApproveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsListClients operation middleware
func (sh *strictHandler) AccountClientsListClients(ctx echo.Context, params AccountClientsListClientsParams) error {
	var request AccountClientsListClientsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsListClients(ctx.Request().Context(), request.(AccountClientsListClientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsListClients")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsListClientsResponseObject); ok {
		return validResponse.VisitAccountClientsListClientsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsCreateClient operation middleware
func (sh *strictHandler) AccountClientsCreateClient(ctx echo.Context) error {
	var request AccountClientsCreateClientRequestObject

	var body AccountClientsCreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsCreateClient(ctx.Request().Context(), request.(AccountClientsCreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsCreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsCreateClientResponseObject); ok {
		return validResponse.VisitAccountClientsCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsDeleteClient operation middleware
func (sh *strictHandler) AccountClientsDeleteClient(ctx echo.Context, id int64) error {
	var request AccountClientsDeleteClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsDeleteClient(ctx.Request().Context(), request.(AccountClientsDeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsDeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsDeleteClientResponseObject); ok {
		return validResponse.VisitAccountClientsDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsUpdateClient operation middleware
func (sh *strictHandler) AccountClientsUpdateClient(ctx echo.Context, id int64) error {
	var request AccountClientsUpdateClientRequestObject

	request.Id = id

	var body AccountClientsUpdateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsUpdateClient(ctx.Request().Context(), request.(AccountClientsUpdateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsUpdateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsUpdateClientResponseObject); ok {
		return validResponse.VisitAccountClientsUpdateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientsInterfaceGetClient operation middleware
func (sh *strictHandler) ClientsInterfaceGetClient(ctx echo.Context, id string) error {
	var request ClientsInterfaceGetClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsInterfaceGetClient(ctx.Request().Context(), request.(ClientsInterfaceGetClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsInterfaceGetClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientsInterfaceGetClientResponseObject); ok {
		return validResponse.VisitClientsInterfaceGetClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HealthzCheck operation middleware
func (sh *strictHandler) HealthzCheck(ctx echo.Context) error {
	var request HealthzCheckRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthzCheck(ctx.Request().Context(), request.(HealthzCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthzCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthzCheckResponseObject); ok {
		return validResponse.VisitHealthzCheckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceAuthorize operation middleware
func (sh *strictHandler) OAuthInterfaceAuthorize(ctx echo.Context, params OAuthInterfaceAuthorizeParams) error {
	var request OAuthInterfaceAuthorizeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceAuthorize(ctx.Request().Context(), request.(OAuthInterfaceAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceAuthorizeResponseObject); ok {
		return validResponse.VisitOAuthInterfaceAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfacePostAuthorize operation middleware
func (sh *strictHandler) OAuthInterfacePostAuthorize(ctx echo.Context) error {
	var request OAuthInterfacePostAuthorizeRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfacePostAuthorize(ctx.Request().Context(), request.(OAuthInterfacePostAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfacePostAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfacePostAuthorizeResponseObject); ok {
		return validResponse.VisitOAuthInterfacePostAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceGetToken operation middleware
func (sh *strictHandler) OAuthInterfaceGetToken(ctx echo.Context) error {
	var request OAuthInterfaceGetTokenRequestObject

	var body OAuthInterfaceGetTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceGetToken(ctx.Request().Context(), request.(OAuthInterfaceGetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceGetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceGetTokenResponseObject); ok {
		return validResponse.VisitOAuthInterfaceGetTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceLogout operation middleware
func (sh *strictHandler) SessionInterfaceLogout(ctx echo.Context) error {
	var request SessionInterfaceLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceLogout(ctx.Request().Context(), request.(SessionInterfaceLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceLogoutResponseObject); ok {
		return validResponse.VisitSessionInterfaceLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceMe operation middleware
func (sh *strictHandler) SessionInterfaceMe(ctx echo.Context) error {
	var request SessionInterfaceMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceMe(ctx.Request().Context(), request.(SessionInterfaceMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceMeResponseObject); ok {
		return validResponse.VisitSessionInterfaceMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceLogin operation middleware
func (sh *strictHandler) SessionInterfaceLogin(ctx echo.Context) error {
	var request SessionInterfaceLoginRequestObject

	var body SessionInterfaceLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceLogin(ctx.Request().Context(), request.(SessionInterfaceLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceLoginResponseObject); ok {
		return validResponse.VisitSessionInterfaceLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UsersInterfaceSignup operation middleware
func (sh *strictHandler) UsersInterfaceSignup(ctx echo.Context) error {
	var request UsersInterfaceSignupRequestObject

	var body UsersInterfaceSignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UsersInterfaceSignup(ctx.Request().Context(), request.(UsersInterfaceSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersInterfaceSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UsersInterfaceSignupResponseObject); ok {
		return validResponse.VisitUsersInterfaceSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"10/x5mLzdwAAAP//ZYuBYVsrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
