// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ApprovalsApproveReq defines model for Approvals.ApproveReq.
type ApprovalsApproveReq struct {
	ClientId string `json:"client_id"`
	Scope    string `json:"scope"`
}

// ApprovalsRes4xx defines model for Approvals.Res4xx.
type ApprovalsRes4xx struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

// Client defines model for Client.
type Client struct {
	Id           int64    `json:"id"`
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientCreate defines model for ClientCreate.
type ClientCreate struct {
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ReqLogin defines model for ReqLogin.
type ReqLogin struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// User defines model for User.
type User struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Name                 string `json:"name"`
	Password             string `json:"password"`
	PasswordConfirmation string `json:"password_confirmation"`
}

// ClientInterfaceListClientsParams defines parameters for ClientInterfaceListClients.
type ClientInterfaceListClientsParams struct {
	Cookie string `json:"cookie"`
}

// ClientInterfaceCreateClientJSONBody defines parameters for ClientInterfaceCreateClient.
type ClientInterfaceCreateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// ClientInterfaceUpdateClientJSONBody defines parameters for ClientInterfaceUpdateClient.
type ClientInterfaceUpdateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	ResponseType string  `form:"response_type" json:"response_type"`
	ClientId     string  `form:"client_id" json:"client_id"`
	RedirectUri  string  `form:"redirect_uri" json:"redirect_uri"`
	Scope        string  `form:"scope" json:"scope"`
	State        *string `form:"state,omitempty" json:"state,omitempty"`
}

// PostAuthorizeMultipartBody defines parameters for PostAuthorize.
type PostAuthorizeMultipartBody struct {
	ClientId     string  `json:"client_id"`
	RedirectUri  string  `json:"redirect_uri"`
	ResponseType string  `json:"response_type"`
	Scope        string  `json:"scope"`
	State        *string `json:"state,omitempty"`
}

// TokenGetTokenJSONBody defines parameters for TokenGetToken.
type TokenGetTokenJSONBody struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

// ApprovalsInterfaceApproveJSONRequestBody defines body for ApprovalsInterfaceApprove for application/json ContentType.
type ApprovalsInterfaceApproveJSONRequestBody = ApprovalsApproveReq

// ClientInterfaceCreateClientJSONRequestBody defines body for ClientInterfaceCreateClient for application/json ContentType.
type ClientInterfaceCreateClientJSONRequestBody ClientInterfaceCreateClientJSONBody

// ClientInterfaceUpdateClientJSONRequestBody defines body for ClientInterfaceUpdateClient for application/json ContentType.
type ClientInterfaceUpdateClientJSONRequestBody ClientInterfaceUpdateClientJSONBody

// PostAuthorizeMultipartRequestBody defines body for PostAuthorize for multipart/form-data ContentType.
type PostAuthorizeMultipartRequestBody PostAuthorizeMultipartBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = ReqLogin

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = UserCreate

// TokenGetTokenJSONRequestBody defines body for TokenGetToken for application/json ContentType.
type TokenGetTokenJSONRequestBody TokenGetTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx echo.Context) error
	// Get all clients
	// (GET /account/clients/)
	ClientInterfaceListClients(ctx echo.Context, params ClientInterfaceListClientsParams) error
	// Create a new client
	// (POST /account/clients/)
	ClientInterfaceCreateClient(ctx echo.Context) error
	// Delete a client
	// (DELETE /account/clients/:id/{id})
	ClientInterfaceDeleteClient(ctx echo.Context, id int64) error
	// Update a client
	// (POST /account/clients/:id/{id})
	ClientInterfaceUpdateClient(ctx echo.Context, id int64) error
	// Authorization Request
	// (GET /authorize)
	Authorize(ctx echo.Context, params AuthorizeParams) error
	// Authorization Request
	// (POST /authorize)
	PostAuthorize(ctx echo.Context) error
	// Get me
	// (GET /me)
	Me(ctx echo.Context) error
	// Logout
	// (DELETE /session)
	Logout(ctx echo.Context) error
	// Login
	// (POST /session)
	Login(ctx echo.Context) error
	// Signup
	// (POST /signup)
	Signup(ctx echo.Context) error
	// Get a token
	// (POST /token/)
	TokenGetToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApprovalsInterfaceApprove converts echo context to params.
func (w *ServerInterfaceWrapper) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApprovalsInterfaceApprove(ctx)
	return err
}

// ClientInterfaceListClients converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceListClients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClientInterfaceListClientsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for cookie, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "cookie", valueList[0], &Cookie, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cookie: %s", err))
		}

		params.Cookie = Cookie
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter cookie is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceListClients(ctx, params)
	return err
}

// ClientInterfaceCreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceCreateClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceCreateClient(ctx)
	return err
}

// ClientInterfaceDeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceDeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceDeleteClient(ctx, id)
	return err
}

// ClientInterfaceUpdateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceUpdateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceUpdateClient(ctx, id)
	return err
}

// Authorize converts echo context to params.
func (w *ServerInterfaceWrapper) Authorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeParams
	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", false, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", false, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", false, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Authorize(ctx, params)
	return err
}

// PostAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthorize(ctx)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Me(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// TokenGetToken converts echo context to params.
func (w *ServerInterfaceWrapper) TokenGetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TokenGetToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/account/approvals", wrapper.ApprovalsInterfaceApprove)
	router.GET(baseURL+"/account/clients/", wrapper.ClientInterfaceListClients)
	router.POST(baseURL+"/account/clients/", wrapper.ClientInterfaceCreateClient)
	router.DELETE(baseURL+"/account/clients/:id/:id", wrapper.ClientInterfaceDeleteClient)
	router.POST(baseURL+"/account/clients/:id/:id", wrapper.ClientInterfaceUpdateClient)
	router.GET(baseURL+"/authorize", wrapper.Authorize)
	router.POST(baseURL+"/authorize", wrapper.PostAuthorize)
	router.GET(baseURL+"/me", wrapper.Me)
	router.DELETE(baseURL+"/session", wrapper.Logout)
	router.POST(baseURL+"/session", wrapper.Login)
	router.POST(baseURL+"/signup", wrapper.Signup)
	router.POST(baseURL+"/token/", wrapper.TokenGetToken)

}

type ApprovalsInterfaceApproveRequestObject struct {
	Body *ApprovalsInterfaceApproveJSONRequestBody
}

type ApprovalsInterfaceApproveResponseObject interface {
	VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error
}

type ApprovalsInterfaceApprove204Response struct {
}

func (response ApprovalsInterfaceApprove204Response) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApprovalsInterfaceApprove400JSONResponse ApprovalsRes4xx

func (response ApprovalsInterfaceApprove400JSONResponse) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApprovalsInterfaceApprove401JSONResponse ApprovalsRes4xx

func (response ApprovalsInterfaceApprove401JSONResponse) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceListClientsRequestObject struct {
	Params ClientInterfaceListClientsParams
}

type ClientInterfaceListClientsResponseObject interface {
	VisitClientInterfaceListClientsResponse(w http.ResponseWriter) error
}

type ClientInterfaceListClients200JSONResponse struct {
	Clients []Client `json:"clients"`
}

func (response ClientInterfaceListClients200JSONResponse) VisitClientInterfaceListClientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceCreateClientRequestObject struct {
	Body *ClientInterfaceCreateClientJSONRequestBody
}

type ClientInterfaceCreateClientResponseObject interface {
	VisitClientInterfaceCreateClientResponse(w http.ResponseWriter) error
}

type ClientInterfaceCreateClient201JSONResponse struct {
	Client Client `json:"client"`
}

func (response ClientInterfaceCreateClient201JSONResponse) VisitClientInterfaceCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceCreateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientInterfaceCreateClient400JSONResponse) VisitClientInterfaceCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceDeleteClientRequestObject struct {
	Id int64 `json:"id"`
}

type ClientInterfaceDeleteClientResponseObject interface {
	VisitClientInterfaceDeleteClientResponse(w http.ResponseWriter) error
}

type ClientInterfaceDeleteClient204Response struct {
}

func (response ClientInterfaceDeleteClient204Response) VisitClientInterfaceDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ClientInterfaceDeleteClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientInterfaceDeleteClient400JSONResponse) VisitClientInterfaceDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceUpdateClientRequestObject struct {
	Id   int64 `json:"id"`
	Body *ClientInterfaceUpdateClientJSONRequestBody
}

type ClientInterfaceUpdateClientResponseObject interface {
	VisitClientInterfaceUpdateClientResponse(w http.ResponseWriter) error
}

type ClientInterfaceUpdateClient200JSONResponse struct {
	Client Client `json:"client"`
}

func (response ClientInterfaceUpdateClient200JSONResponse) VisitClientInterfaceUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceUpdateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientInterfaceUpdateClient400JSONResponse) VisitClientInterfaceUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeRequestObject struct {
	Params AuthorizeParams
}

type AuthorizeResponseObject interface {
	VisitAuthorizeResponse(w http.ResponseWriter) error
}

type Authorize204Response struct {
}

func (response Authorize204Response) VisitAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Authorize302JSONResponse struct {
	Error            string  `json:"error"`
	ErrorDescription string  `json:"error_description"`
	State            *string `json:"state,omitempty"`
}

func (response Authorize302JSONResponse) VisitAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(302)

	return json.NewEncoder(w).Encode(response)
}

type Authorize400JSONResponse struct {
	Error            string  `json:"error"`
	ErrorDescription string  `json:"error_description"`
	State            *string `json:"state,omitempty"`
}

func (response Authorize400JSONResponse) VisitAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthorizeRequestObject struct {
	Body *multipart.Reader
}

type PostAuthorizeResponseObject interface {
	VisitPostAuthorizeResponse(w http.ResponseWriter) error
}

type PostAuthorize204Response struct {
}

func (response PostAuthorize204Response) VisitPostAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostAuthorize302JSONResponse struct {
	Error            string  `json:"error"`
	ErrorDescription string  `json:"error_description"`
	State            *string `json:"state,omitempty"`
}

func (response PostAuthorize302JSONResponse) VisitPostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(302)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthorize400JSONResponse struct {
	Error            string  `json:"error"`
	ErrorDescription string  `json:"error_description"`
	State            *string `json:"state,omitempty"`
}

func (response PostAuthorize400JSONResponse) VisitPostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthorize401JSONResponse struct {
	Error            string  `json:"error"`
	ErrorDescription string  `json:"error_description"`
	State            *string `json:"state,omitempty"`
}

func (response PostAuthorize401JSONResponse) VisitPostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MeRequestObject struct {
}

type MeResponseObject interface {
	VisitMeResponse(w http.ResponseWriter) error
}

type Me200JSONResponse struct {
	User User `json:"user"`
}

func (response Me200JSONResponse) VisitMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout400JSONResponse struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response Logout400JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login204Response struct {
}

func (response Login204Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Login400JSONResponse struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response Login400JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SignupRequestObject struct {
	Body *SignupJSONRequestBody
}

type SignupResponseObject interface {
	VisitSignupResponse(w http.ResponseWriter) error
}

type Signup204Response struct {
}

func (response Signup204Response) VisitSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Signup400JSONResponse struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response Signup400JSONResponse) VisitSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TokenGetTokenRequestObject struct {
	Body *TokenGetTokenJSONRequestBody
}

type TokenGetTokenResponseObject interface {
	VisitTokenGetTokenResponse(w http.ResponseWriter) error
}

type TokenGetToken200JSONResponse struct {
	Token string `json:"token"`
}

func (response TokenGetToken200JSONResponse) VisitTokenGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TokenGetToken400JSONResponse struct {
	Error            int32  `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response TokenGetToken400JSONResponse) VisitTokenGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx context.Context, request ApprovalsInterfaceApproveRequestObject) (ApprovalsInterfaceApproveResponseObject, error)
	// Get all clients
	// (GET /account/clients/)
	ClientInterfaceListClients(ctx context.Context, request ClientInterfaceListClientsRequestObject) (ClientInterfaceListClientsResponseObject, error)
	// Create a new client
	// (POST /account/clients/)
	ClientInterfaceCreateClient(ctx context.Context, request ClientInterfaceCreateClientRequestObject) (ClientInterfaceCreateClientResponseObject, error)
	// Delete a client
	// (DELETE /account/clients/:id/{id})
	ClientInterfaceDeleteClient(ctx context.Context, request ClientInterfaceDeleteClientRequestObject) (ClientInterfaceDeleteClientResponseObject, error)
	// Update a client
	// (POST /account/clients/:id/{id})
	ClientInterfaceUpdateClient(ctx context.Context, request ClientInterfaceUpdateClientRequestObject) (ClientInterfaceUpdateClientResponseObject, error)
	// Authorization Request
	// (GET /authorize)
	Authorize(ctx context.Context, request AuthorizeRequestObject) (AuthorizeResponseObject, error)
	// Authorization Request
	// (POST /authorize)
	PostAuthorize(ctx context.Context, request PostAuthorizeRequestObject) (PostAuthorizeResponseObject, error)
	// Get me
	// (GET /me)
	Me(ctx context.Context, request MeRequestObject) (MeResponseObject, error)
	// Logout
	// (DELETE /session)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Login
	// (POST /session)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Signup
	// (POST /signup)
	Signup(ctx context.Context, request SignupRequestObject) (SignupResponseObject, error)
	// Get a token
	// (POST /token/)
	TokenGetToken(ctx context.Context, request TokenGetTokenRequestObject) (TokenGetTokenResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ApprovalsInterfaceApprove operation middleware
func (sh *strictHandler) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var request ApprovalsInterfaceApproveRequestObject

	var body ApprovalsInterfaceApproveJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApprovalsInterfaceApprove(ctx.Request().Context(), request.(ApprovalsInterfaceApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApprovalsInterfaceApprove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApprovalsInterfaceApproveResponseObject); ok {
		return validResponse.VisitApprovalsInterfaceApproveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceListClients operation middleware
func (sh *strictHandler) ClientInterfaceListClients(ctx echo.Context, params ClientInterfaceListClientsParams) error {
	var request ClientInterfaceListClientsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceListClients(ctx.Request().Context(), request.(ClientInterfaceListClientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceListClients")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceListClientsResponseObject); ok {
		return validResponse.VisitClientInterfaceListClientsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceCreateClient operation middleware
func (sh *strictHandler) ClientInterfaceCreateClient(ctx echo.Context) error {
	var request ClientInterfaceCreateClientRequestObject

	var body ClientInterfaceCreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceCreateClient(ctx.Request().Context(), request.(ClientInterfaceCreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceCreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceCreateClientResponseObject); ok {
		return validResponse.VisitClientInterfaceCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceDeleteClient operation middleware
func (sh *strictHandler) ClientInterfaceDeleteClient(ctx echo.Context, id int64) error {
	var request ClientInterfaceDeleteClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceDeleteClient(ctx.Request().Context(), request.(ClientInterfaceDeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceDeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceDeleteClientResponseObject); ok {
		return validResponse.VisitClientInterfaceDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceUpdateClient operation middleware
func (sh *strictHandler) ClientInterfaceUpdateClient(ctx echo.Context, id int64) error {
	var request ClientInterfaceUpdateClientRequestObject

	request.Id = id

	var body ClientInterfaceUpdateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceUpdateClient(ctx.Request().Context(), request.(ClientInterfaceUpdateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceUpdateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceUpdateClientResponseObject); ok {
		return validResponse.VisitClientInterfaceUpdateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Authorize operation middleware
func (sh *strictHandler) Authorize(ctx echo.Context, params AuthorizeParams) error {
	var request AuthorizeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Authorize(ctx.Request().Context(), request.(AuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Authorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthorizeResponseObject); ok {
		return validResponse.VisitAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthorize operation middleware
func (sh *strictHandler) PostAuthorize(ctx echo.Context) error {
	var request PostAuthorizeRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthorize(ctx.Request().Context(), request.(PostAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthorizeResponseObject); ok {
		return validResponse.VisitPostAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Me operation middleware
func (sh *strictHandler) Me(ctx echo.Context) error {
	var request MeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Me(ctx.Request().Context(), request.(MeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Me")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MeResponseObject); ok {
		return validResponse.VisitMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Signup operation middleware
func (sh *strictHandler) Signup(ctx echo.Context) error {
	var request SignupRequestObject

	var body SignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Signup(ctx.Request().Context(), request.(SignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SignupResponseObject); ok {
		return validResponse.VisitSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// TokenGetToken operation middleware
func (sh *strictHandler) TokenGetToken(ctx echo.Context) error {
	var request TokenGetTokenRequestObject

	var body TokenGetTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TokenGetToken(ctx.Request().Context(), request.(TokenGetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenGetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TokenGetTokenResponseObject); ok {
		return validResponse.VisitTokenGetTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
