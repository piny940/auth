// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Client defines model for Client.
type Client struct {
	Id           int64    `json:"id"`
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientCreate defines model for ClientCreate.
type ClientCreate struct {
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientsCreateClientJSONBody defines parameters for ClientsCreateClient.
type ClientsCreateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// ClientsUpdateClientJSONBody defines parameters for ClientsUpdateClient.
type ClientsUpdateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// V1AuthorizeParams defines parameters for V1Authorize.
type V1AuthorizeParams struct {
	ResponseType string  `form:"response_type" json:"response_type"`
	ClientId     string  `form:"client_id" json:"client_id"`
	RedirectUri  string  `form:"redirect_uri" json:"redirect_uri"`
	Scope        string  `form:"scope" json:"scope"`
	State        *string `form:"state,omitempty" json:"state,omitempty"`
}

// V1LoginJSONBody defines parameters for V1Login.
type V1LoginJSONBody struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// TokenGetTokenJSONBody defines parameters for TokenGetToken.
type TokenGetTokenJSONBody struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

// ClientsCreateClientJSONRequestBody defines body for ClientsCreateClient for application/json ContentType.
type ClientsCreateClientJSONRequestBody ClientsCreateClientJSONBody

// ClientsUpdateClientJSONRequestBody defines body for ClientsUpdateClient for application/json ContentType.
type ClientsUpdateClientJSONRequestBody ClientsUpdateClientJSONBody

// V1LoginJSONRequestBody defines body for V1Login for application/json ContentType.
type V1LoginJSONRequestBody V1LoginJSONBody

// TokenGetTokenJSONRequestBody defines body for TokenGetToken for application/json ContentType.
type TokenGetTokenJSONRequestBody TokenGetTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all clients
	// (GET /api/v1/account/clients/)
	ClientsListClients(ctx echo.Context) error
	// Create a new client
	// (POST /api/v1/account/clients/)
	ClientsCreateClient(ctx echo.Context) error
	// Delete a client
	// (DELETE /api/v1/account/clients/:id/{id})
	ClientsDeleteClient(ctx echo.Context, id int64) error
	// Update a client
	// (POST /api/v1/account/clients/:id/{id})
	ClientsUpdateClient(ctx echo.Context, id int64) error
	// Authorization Request
	// (GET /api/v1/authorize)
	V1Authorize(ctx echo.Context, params V1AuthorizeParams) error
	// Login
	// (POST /api/v1/login)
	V1Login(ctx echo.Context) error
	// Get a token
	// (POST /api/v1/token/)
	TokenGetToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ClientsListClients converts echo context to params.
func (w *ServerInterfaceWrapper) ClientsListClients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientsListClients(ctx)
	return err
}

// ClientsCreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientsCreateClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientsCreateClient(ctx)
	return err
}

// ClientsDeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientsDeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientsDeleteClient(ctx, id)
	return err
}

// ClientsUpdateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientsUpdateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientsUpdateClient(ctx, id)
	return err
}

// V1Authorize converts echo context to params.
func (w *ServerInterfaceWrapper) V1Authorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1AuthorizeParams
	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", false, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", false, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", false, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1Authorize(ctx, params)
	return err
}

// V1Login converts echo context to params.
func (w *ServerInterfaceWrapper) V1Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1Login(ctx)
	return err
}

// TokenGetToken converts echo context to params.
func (w *ServerInterfaceWrapper) TokenGetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TokenGetToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/account/clients/", wrapper.ClientsListClients)
	router.POST(baseURL+"/api/v1/account/clients/", wrapper.ClientsCreateClient)
	router.DELETE(baseURL+"/api/v1/account/clients/:id/:id", wrapper.ClientsDeleteClient)
	router.POST(baseURL+"/api/v1/account/clients/:id/:id", wrapper.ClientsUpdateClient)
	router.GET(baseURL+"/api/v1/authorize", wrapper.V1Authorize)
	router.POST(baseURL+"/api/v1/login", wrapper.V1Login)
	router.POST(baseURL+"/api/v1/token/", wrapper.TokenGetToken)

}

type ClientsListClientsRequestObject struct {
}

type ClientsListClientsResponseObject interface {
	VisitClientsListClientsResponse(w http.ResponseWriter) error
}

type ClientsListClients200JSONResponse struct {
	Clients []Client `json:"clients"`
}

func (response ClientsListClients200JSONResponse) VisitClientsListClientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientsCreateClientRequestObject struct {
	Body *ClientsCreateClientJSONRequestBody
}

type ClientsCreateClientResponseObject interface {
	VisitClientsCreateClientResponse(w http.ResponseWriter) error
}

type ClientsCreateClient201JSONResponse struct {
	Client Client `json:"client"`
}

func (response ClientsCreateClient201JSONResponse) VisitClientsCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ClientsCreateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientsCreateClient400JSONResponse) VisitClientsCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientsDeleteClientRequestObject struct {
	Id int64 `json:"id"`
}

type ClientsDeleteClientResponseObject interface {
	VisitClientsDeleteClientResponse(w http.ResponseWriter) error
}

type ClientsDeleteClient204Response struct {
}

func (response ClientsDeleteClient204Response) VisitClientsDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ClientsDeleteClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientsDeleteClient400JSONResponse) VisitClientsDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientsUpdateClientRequestObject struct {
	Id   int64 `json:"id"`
	Body *ClientsUpdateClientJSONRequestBody
}

type ClientsUpdateClientResponseObject interface {
	VisitClientsUpdateClientResponse(w http.ResponseWriter) error
}

type ClientsUpdateClient200JSONResponse struct {
	Client Client `json:"client"`
}

func (response ClientsUpdateClient200JSONResponse) VisitClientsUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientsUpdateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientsUpdateClient400JSONResponse) VisitClientsUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1AuthorizeRequestObject struct {
	Params V1AuthorizeParams
}

type V1AuthorizeResponseObject interface {
	VisitV1AuthorizeResponse(w http.ResponseWriter) error
}

type V1Authorize302Response struct {
}

func (response V1Authorize302Response) VisitV1AuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type V1Authorize400JSONResponse struct {
	Error            int32   `json:"error"`
	ErrorDescription string  `json:"error_description"`
	State            *string `json:"state,omitempty"`
}

func (response V1Authorize400JSONResponse) VisitV1AuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1LoginRequestObject struct {
	Body *V1LoginJSONRequestBody
}

type V1LoginResponseObject interface {
	VisitV1LoginResponse(w http.ResponseWriter) error
}

type V1Login204Response struct {
}

func (response V1Login204Response) VisitV1LoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1Login400JSONResponse struct {
	Error            int32  `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response V1Login400JSONResponse) VisitV1LoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TokenGetTokenRequestObject struct {
	Body *TokenGetTokenJSONRequestBody
}

type TokenGetTokenResponseObject interface {
	VisitTokenGetTokenResponse(w http.ResponseWriter) error
}

type TokenGetToken200JSONResponse struct {
	Token string `json:"token"`
}

func (response TokenGetToken200JSONResponse) VisitTokenGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TokenGetToken400JSONResponse struct {
	Error            int32  `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response TokenGetToken400JSONResponse) VisitTokenGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all clients
	// (GET /api/v1/account/clients/)
	ClientsListClients(ctx context.Context, request ClientsListClientsRequestObject) (ClientsListClientsResponseObject, error)
	// Create a new client
	// (POST /api/v1/account/clients/)
	ClientsCreateClient(ctx context.Context, request ClientsCreateClientRequestObject) (ClientsCreateClientResponseObject, error)
	// Delete a client
	// (DELETE /api/v1/account/clients/:id/{id})
	ClientsDeleteClient(ctx context.Context, request ClientsDeleteClientRequestObject) (ClientsDeleteClientResponseObject, error)
	// Update a client
	// (POST /api/v1/account/clients/:id/{id})
	ClientsUpdateClient(ctx context.Context, request ClientsUpdateClientRequestObject) (ClientsUpdateClientResponseObject, error)
	// Authorization Request
	// (GET /api/v1/authorize)
	V1Authorize(ctx context.Context, request V1AuthorizeRequestObject) (V1AuthorizeResponseObject, error)
	// Login
	// (POST /api/v1/login)
	V1Login(ctx context.Context, request V1LoginRequestObject) (V1LoginResponseObject, error)
	// Get a token
	// (POST /api/v1/token/)
	TokenGetToken(ctx context.Context, request TokenGetTokenRequestObject) (TokenGetTokenResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ClientsListClients operation middleware
func (sh *strictHandler) ClientsListClients(ctx echo.Context) error {
	var request ClientsListClientsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsListClients(ctx.Request().Context(), request.(ClientsListClientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsListClients")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientsListClientsResponseObject); ok {
		return validResponse.VisitClientsListClientsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientsCreateClient operation middleware
func (sh *strictHandler) ClientsCreateClient(ctx echo.Context) error {
	var request ClientsCreateClientRequestObject

	var body ClientsCreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsCreateClient(ctx.Request().Context(), request.(ClientsCreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsCreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientsCreateClientResponseObject); ok {
		return validResponse.VisitClientsCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientsDeleteClient operation middleware
func (sh *strictHandler) ClientsDeleteClient(ctx echo.Context, id int64) error {
	var request ClientsDeleteClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsDeleteClient(ctx.Request().Context(), request.(ClientsDeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsDeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientsDeleteClientResponseObject); ok {
		return validResponse.VisitClientsDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientsUpdateClient operation middleware
func (sh *strictHandler) ClientsUpdateClient(ctx echo.Context, id int64) error {
	var request ClientsUpdateClientRequestObject

	request.Id = id

	var body ClientsUpdateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsUpdateClient(ctx.Request().Context(), request.(ClientsUpdateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsUpdateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientsUpdateClientResponseObject); ok {
		return validResponse.VisitClientsUpdateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// V1Authorize operation middleware
func (sh *strictHandler) V1Authorize(ctx echo.Context, params V1AuthorizeParams) error {
	var request V1AuthorizeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1Authorize(ctx.Request().Context(), request.(V1AuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Authorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1AuthorizeResponseObject); ok {
		return validResponse.VisitV1AuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// V1Login operation middleware
func (sh *strictHandler) V1Login(ctx echo.Context) error {
	var request V1LoginRequestObject

	var body V1LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V1Login(ctx.Request().Context(), request.(V1LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V1LoginResponseObject); ok {
		return validResponse.VisitV1LoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// TokenGetToken operation middleware
func (sh *strictHandler) TokenGetToken(ctx echo.Context) error {
	var request TokenGetTokenRequestObject

	var body TokenGetTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TokenGetToken(ctx.Request().Context(), request.(TokenGetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenGetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TokenGetTokenResponseObject); ok {
		return validResponse.VisitTokenGetTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
