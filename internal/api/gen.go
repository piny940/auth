// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for OAuthAuthorizeErr.
const (
	AccessDenied            OAuthAuthorizeErr = "access_denied"
	InvalidRequest          OAuthAuthorizeErr = "invalid_request"
	InvalidScope            OAuthAuthorizeErr = "invalid_scope"
	ServerError             OAuthAuthorizeErr = "server_error"
	TemporarilyUnavailable  OAuthAuthorizeErr = "temporarily_unavailable"
	UnauthorizedClient      OAuthAuthorizeErr = "unauthorized_client"
	UnsupportedResponseType OAuthAuthorizeErr = "unsupported_response_type"
)

// Defines values for SessionLoginErr.
const (
	InvalidNameOrPassword SessionLoginErr = "invalid_name_or_password"
)

// Defines values for SessionLogoutErr.
const (
	NotLoggedIn SessionLogoutErr = "not_logged_in"
)

// ApprovalsApproveReq defines model for Approvals.ApproveReq.
type ApprovalsApproveReq struct {
	ClientId string `json:"client_id"`
	Scope    string `json:"scope"`
}

// ApprovalsRes4xx defines model for Approvals.Res4xx.
type ApprovalsRes4xx struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

// Client defines model for Client.
type Client struct {
	Id           int64    `json:"id"`
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientCreate defines model for ClientCreate.
type ClientCreate struct {
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// OAuthAuthorizeErr defines model for OAuth.AuthorizeErr.
type OAuthAuthorizeErr string

// OAuthAuthorizeReq defines model for OAuth.AuthorizeReq.
type OAuthAuthorizeReq struct {
	ClientId     string  `json:"client_id"`
	RedirectUri  string  `json:"redirect_uri"`
	ResponseType string  `json:"response_type"`
	Scope        string  `json:"scope"`
	State        *string `json:"state,omitempty"`
}

// OAuthAuthorizeReqMultiPart defines model for OAuth.AuthorizeReqMultiPart.
type OAuthAuthorizeReqMultiPart struct {
	ClientId     string  `json:"client_id"`
	RedirectUri  string  `json:"redirect_uri"`
	ResponseType string  `json:"response_type"`
	Scope        string  `json:"scope"`
	State        *string `json:"state,omitempty"`
}

// ReqSignup defines model for ReqSignup.
type ReqSignup struct {
	Name                 string `json:"name"`
	Password             string `json:"password"`
	PasswordConfirmation string `json:"password_confirmation"`
}

// SessionLoginErr defines model for Session.LoginErr.
type SessionLoginErr string

// SessionLoginReq defines model for Session.LoginReq.
type SessionLoginReq struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// SessionLogoutErr defines model for Session.LogoutErr.
type SessionLogoutErr string

// SessionMeRes defines model for Session.MeRes.
type SessionMeRes struct {
	User *User `json:"user"`
}

// User defines model for User.
type User struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Name                 string `json:"name"`
	Password             string `json:"password"`
	PasswordConfirmation string `json:"password_confirmation"`
}

// ClientInterfaceListClientsParams defines parameters for ClientInterfaceListClients.
type ClientInterfaceListClientsParams struct {
	Cookie string `json:"cookie"`
}

// ClientInterfaceCreateClientJSONBody defines parameters for ClientInterfaceCreateClient.
type ClientInterfaceCreateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// ClientInterfaceUpdateClientJSONBody defines parameters for ClientInterfaceUpdateClient.
type ClientInterfaceUpdateClientJSONBody struct {
	Client ClientCreate `json:"client"`
}

// OAuthInterfaceAuthorizeParams defines parameters for OAuthInterfaceAuthorize.
type OAuthInterfaceAuthorizeParams struct {
	Query OAuthAuthorizeReq `form:"query" json:"query"`
}

// OAuthInterfaceGetTokenJSONBody defines parameters for OAuthInterfaceGetToken.
type OAuthInterfaceGetTokenJSONBody struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

// ApprovalsInterfaceApproveJSONRequestBody defines body for ApprovalsInterfaceApprove for application/json ContentType.
type ApprovalsInterfaceApproveJSONRequestBody = ApprovalsApproveReq

// ClientInterfaceCreateClientJSONRequestBody defines body for ClientInterfaceCreateClient for application/json ContentType.
type ClientInterfaceCreateClientJSONRequestBody ClientInterfaceCreateClientJSONBody

// ClientInterfaceUpdateClientJSONRequestBody defines body for ClientInterfaceUpdateClient for application/json ContentType.
type ClientInterfaceUpdateClientJSONRequestBody ClientInterfaceUpdateClientJSONBody

// OAuthInterfacePostAuthorizeMultipartRequestBody defines body for OAuthInterfacePostAuthorize for multipart/form-data ContentType.
type OAuthInterfacePostAuthorizeMultipartRequestBody = OAuthAuthorizeReqMultiPart

// OAuthInterfaceGetTokenJSONRequestBody defines body for OAuthInterfaceGetToken for application/json ContentType.
type OAuthInterfaceGetTokenJSONRequestBody OAuthInterfaceGetTokenJSONBody

// SessionInterfaceLoginJSONRequestBody defines body for SessionInterfaceLogin for application/json ContentType.
type SessionInterfaceLoginJSONRequestBody = SessionLoginReq

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx echo.Context) error
	// Get all clients
	// (GET /account/clients/)
	ClientInterfaceListClients(ctx echo.Context, params ClientInterfaceListClientsParams) error
	// Create a new client
	// (POST /account/clients/)
	ClientInterfaceCreateClient(ctx echo.Context) error
	// Delete a client
	// (DELETE /account/clients/:id/{id})
	ClientInterfaceDeleteClient(ctx echo.Context, id int64) error
	// Update a client
	// (POST /account/clients/:id/{id})
	ClientInterfaceUpdateClient(ctx echo.Context, id int64) error
	// Authorization Request
	// (GET /oauth/authorize)
	OAuthInterfaceAuthorize(ctx echo.Context, params OAuthInterfaceAuthorizeParams) error
	// Authorization Request
	// (POST /oauth/authorize)
	OAuthInterfacePostAuthorize(ctx echo.Context) error
	// Get a token
	// (POST /oauth/token)
	OAuthInterfaceGetToken(ctx echo.Context) error
	// Logout
	// (DELETE /session)
	SessionInterfaceLogout(ctx echo.Context) error
	// Get session
	// (GET /session)
	SessionInterfaceMe(ctx echo.Context) error
	// Login
	// (POST /session)
	SessionInterfaceLogin(ctx echo.Context) error
	// Signup
	// (POST /signup)
	Signup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApprovalsInterfaceApprove converts echo context to params.
func (w *ServerInterfaceWrapper) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApprovalsInterfaceApprove(ctx)
	return err
}

// ClientInterfaceListClients converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceListClients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClientInterfaceListClientsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for cookie, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "cookie", valueList[0], &Cookie, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cookie: %s", err))
		}

		params.Cookie = Cookie
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter cookie is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceListClients(ctx, params)
	return err
}

// ClientInterfaceCreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceCreateClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceCreateClient(ctx)
	return err
}

// ClientInterfaceDeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceDeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceDeleteClient(ctx, id)
	return err
}

// ClientInterfaceUpdateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientInterfaceUpdateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientInterfaceUpdateClient(ctx, id)
	return err
}

// OAuthInterfaceAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceAuthorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OAuthInterfaceAuthorizeParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", false, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceAuthorize(ctx, params)
	return err
}

// OAuthInterfacePostAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfacePostAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfacePostAuthorize(ctx)
	return err
}

// OAuthInterfaceGetToken converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceGetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceGetToken(ctx)
	return err
}

// SessionInterfaceLogout converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceLogout(ctx)
	return err
}

// SessionInterfaceMe converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceMe(ctx)
	return err
}

// SessionInterfaceLogin converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceLogin(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/account/approvals", wrapper.ApprovalsInterfaceApprove)
	router.GET(baseURL+"/account/clients/", wrapper.ClientInterfaceListClients)
	router.POST(baseURL+"/account/clients/", wrapper.ClientInterfaceCreateClient)
	router.DELETE(baseURL+"/account/clients/:id/:id", wrapper.ClientInterfaceDeleteClient)
	router.POST(baseURL+"/account/clients/:id/:id", wrapper.ClientInterfaceUpdateClient)
	router.GET(baseURL+"/oauth/authorize", wrapper.OAuthInterfaceAuthorize)
	router.POST(baseURL+"/oauth/authorize", wrapper.OAuthInterfacePostAuthorize)
	router.POST(baseURL+"/oauth/token", wrapper.OAuthInterfaceGetToken)
	router.DELETE(baseURL+"/session", wrapper.SessionInterfaceLogout)
	router.GET(baseURL+"/session", wrapper.SessionInterfaceMe)
	router.POST(baseURL+"/session", wrapper.SessionInterfaceLogin)
	router.POST(baseURL+"/signup", wrapper.Signup)

}

type ApprovalsInterfaceApproveRequestObject struct {
	Body *ApprovalsInterfaceApproveJSONRequestBody
}

type ApprovalsInterfaceApproveResponseObject interface {
	VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error
}

type ApprovalsInterfaceApprove204Response struct {
}

func (response ApprovalsInterfaceApprove204Response) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApprovalsInterfaceApprove400JSONResponse ApprovalsRes4xx

func (response ApprovalsInterfaceApprove400JSONResponse) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceListClientsRequestObject struct {
	Params ClientInterfaceListClientsParams
}

type ClientInterfaceListClientsResponseObject interface {
	VisitClientInterfaceListClientsResponse(w http.ResponseWriter) error
}

type ClientInterfaceListClients200JSONResponse struct {
	Clients []Client `json:"clients"`
}

func (response ClientInterfaceListClients200JSONResponse) VisitClientInterfaceListClientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceCreateClientRequestObject struct {
	Body *ClientInterfaceCreateClientJSONRequestBody
}

type ClientInterfaceCreateClientResponseObject interface {
	VisitClientInterfaceCreateClientResponse(w http.ResponseWriter) error
}

type ClientInterfaceCreateClient201JSONResponse struct {
	Client Client `json:"client"`
}

func (response ClientInterfaceCreateClient201JSONResponse) VisitClientInterfaceCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceCreateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientInterfaceCreateClient400JSONResponse) VisitClientInterfaceCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceDeleteClientRequestObject struct {
	Id int64 `json:"id"`
}

type ClientInterfaceDeleteClientResponseObject interface {
	VisitClientInterfaceDeleteClientResponse(w http.ResponseWriter) error
}

type ClientInterfaceDeleteClient204Response struct {
}

func (response ClientInterfaceDeleteClient204Response) VisitClientInterfaceDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ClientInterfaceDeleteClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientInterfaceDeleteClient400JSONResponse) VisitClientInterfaceDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceUpdateClientRequestObject struct {
	Id   int64 `json:"id"`
	Body *ClientInterfaceUpdateClientJSONRequestBody
}

type ClientInterfaceUpdateClientResponseObject interface {
	VisitClientInterfaceUpdateClientResponse(w http.ResponseWriter) error
}

type ClientInterfaceUpdateClient200JSONResponse struct {
	Client Client `json:"client"`
}

func (response ClientInterfaceUpdateClient200JSONResponse) VisitClientInterfaceUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientInterfaceUpdateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response ClientInterfaceUpdateClient400JSONResponse) VisitClientInterfaceUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceAuthorizeRequestObject struct {
	Params OAuthInterfaceAuthorizeParams
}

type OAuthInterfaceAuthorizeResponseObject interface {
	VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error
}

type OAuthInterfaceAuthorize204Response struct {
}

func (response OAuthInterfaceAuthorize204Response) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OAuthInterfaceAuthorize302JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfaceAuthorize302JSONResponse) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(302)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceAuthorize400JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfaceAuthorize400JSONResponse) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfacePostAuthorizeRequestObject struct {
	Body *multipart.Reader
}

type OAuthInterfacePostAuthorizeResponseObject interface {
	VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error
}

type OAuthInterfacePostAuthorize204Response struct {
}

func (response OAuthInterfacePostAuthorize204Response) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OAuthInterfacePostAuthorize302JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfacePostAuthorize302JSONResponse) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(302)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfacePostAuthorize400JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfacePostAuthorize400JSONResponse) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceGetTokenRequestObject struct {
	Body *OAuthInterfaceGetTokenJSONRequestBody
}

type OAuthInterfaceGetTokenResponseObject interface {
	VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error
}

type OAuthInterfaceGetToken200JSONResponse struct {
	Token string `json:"token"`
}

func (response OAuthInterfaceGetToken200JSONResponse) VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceGetToken400JSONResponse struct {
	Error            int32  `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response OAuthInterfaceGetToken400JSONResponse) VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceLogoutRequestObject struct {
}

type SessionInterfaceLogoutResponseObject interface {
	VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error
}

type SessionInterfaceLogout204ResponseHeaders struct {
	SetCookie string
}

type SessionInterfaceLogout204Response struct {
	Headers SessionInterfaceLogout204ResponseHeaders
}

func (response SessionInterfaceLogout204Response) VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type SessionInterfaceLogout400JSONResponse struct {
	Error            SessionLogoutErr `json:"error"`
	ErrorDescription string           `json:"error_description"`
}

func (response SessionInterfaceLogout400JSONResponse) VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceMeRequestObject struct {
}

type SessionInterfaceMeResponseObject interface {
	VisitSessionInterfaceMeResponse(w http.ResponseWriter) error
}

type SessionInterfaceMe200JSONResponse SessionMeRes

func (response SessionInterfaceMe200JSONResponse) VisitSessionInterfaceMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceLoginRequestObject struct {
	Body *SessionInterfaceLoginJSONRequestBody
}

type SessionInterfaceLoginResponseObject interface {
	VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error
}

type SessionInterfaceLogin204ResponseHeaders struct {
	SetCookie string
}

type SessionInterfaceLogin204Response struct {
	Headers SessionInterfaceLogin204ResponseHeaders
}

func (response SessionInterfaceLogin204Response) VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type SessionInterfaceLogin400JSONResponse struct {
	Error            SessionLoginErr `json:"error"`
	ErrorDescription string          `json:"error_description"`
}

func (response SessionInterfaceLogin400JSONResponse) VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SignupRequestObject struct {
	Body *SignupJSONRequestBody
}

type SignupResponseObject interface {
	VisitSignupResponse(w http.ResponseWriter) error
}

type Signup204Response struct {
}

func (response Signup204Response) VisitSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Signup400JSONResponse struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (response Signup400JSONResponse) VisitSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx context.Context, request ApprovalsInterfaceApproveRequestObject) (ApprovalsInterfaceApproveResponseObject, error)
	// Get all clients
	// (GET /account/clients/)
	ClientInterfaceListClients(ctx context.Context, request ClientInterfaceListClientsRequestObject) (ClientInterfaceListClientsResponseObject, error)
	// Create a new client
	// (POST /account/clients/)
	ClientInterfaceCreateClient(ctx context.Context, request ClientInterfaceCreateClientRequestObject) (ClientInterfaceCreateClientResponseObject, error)
	// Delete a client
	// (DELETE /account/clients/:id/{id})
	ClientInterfaceDeleteClient(ctx context.Context, request ClientInterfaceDeleteClientRequestObject) (ClientInterfaceDeleteClientResponseObject, error)
	// Update a client
	// (POST /account/clients/:id/{id})
	ClientInterfaceUpdateClient(ctx context.Context, request ClientInterfaceUpdateClientRequestObject) (ClientInterfaceUpdateClientResponseObject, error)
	// Authorization Request
	// (GET /oauth/authorize)
	OAuthInterfaceAuthorize(ctx context.Context, request OAuthInterfaceAuthorizeRequestObject) (OAuthInterfaceAuthorizeResponseObject, error)
	// Authorization Request
	// (POST /oauth/authorize)
	OAuthInterfacePostAuthorize(ctx context.Context, request OAuthInterfacePostAuthorizeRequestObject) (OAuthInterfacePostAuthorizeResponseObject, error)
	// Get a token
	// (POST /oauth/token)
	OAuthInterfaceGetToken(ctx context.Context, request OAuthInterfaceGetTokenRequestObject) (OAuthInterfaceGetTokenResponseObject, error)
	// Logout
	// (DELETE /session)
	SessionInterfaceLogout(ctx context.Context, request SessionInterfaceLogoutRequestObject) (SessionInterfaceLogoutResponseObject, error)
	// Get session
	// (GET /session)
	SessionInterfaceMe(ctx context.Context, request SessionInterfaceMeRequestObject) (SessionInterfaceMeResponseObject, error)
	// Login
	// (POST /session)
	SessionInterfaceLogin(ctx context.Context, request SessionInterfaceLoginRequestObject) (SessionInterfaceLoginResponseObject, error)
	// Signup
	// (POST /signup)
	Signup(ctx context.Context, request SignupRequestObject) (SignupResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ApprovalsInterfaceApprove operation middleware
func (sh *strictHandler) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var request ApprovalsInterfaceApproveRequestObject

	var body ApprovalsInterfaceApproveJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApprovalsInterfaceApprove(ctx.Request().Context(), request.(ApprovalsInterfaceApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApprovalsInterfaceApprove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApprovalsInterfaceApproveResponseObject); ok {
		return validResponse.VisitApprovalsInterfaceApproveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceListClients operation middleware
func (sh *strictHandler) ClientInterfaceListClients(ctx echo.Context, params ClientInterfaceListClientsParams) error {
	var request ClientInterfaceListClientsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceListClients(ctx.Request().Context(), request.(ClientInterfaceListClientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceListClients")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceListClientsResponseObject); ok {
		return validResponse.VisitClientInterfaceListClientsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceCreateClient operation middleware
func (sh *strictHandler) ClientInterfaceCreateClient(ctx echo.Context) error {
	var request ClientInterfaceCreateClientRequestObject

	var body ClientInterfaceCreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceCreateClient(ctx.Request().Context(), request.(ClientInterfaceCreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceCreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceCreateClientResponseObject); ok {
		return validResponse.VisitClientInterfaceCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceDeleteClient operation middleware
func (sh *strictHandler) ClientInterfaceDeleteClient(ctx echo.Context, id int64) error {
	var request ClientInterfaceDeleteClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceDeleteClient(ctx.Request().Context(), request.(ClientInterfaceDeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceDeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceDeleteClientResponseObject); ok {
		return validResponse.VisitClientInterfaceDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientInterfaceUpdateClient operation middleware
func (sh *strictHandler) ClientInterfaceUpdateClient(ctx echo.Context, id int64) error {
	var request ClientInterfaceUpdateClientRequestObject

	request.Id = id

	var body ClientInterfaceUpdateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientInterfaceUpdateClient(ctx.Request().Context(), request.(ClientInterfaceUpdateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientInterfaceUpdateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientInterfaceUpdateClientResponseObject); ok {
		return validResponse.VisitClientInterfaceUpdateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceAuthorize operation middleware
func (sh *strictHandler) OAuthInterfaceAuthorize(ctx echo.Context, params OAuthInterfaceAuthorizeParams) error {
	var request OAuthInterfaceAuthorizeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceAuthorize(ctx.Request().Context(), request.(OAuthInterfaceAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceAuthorizeResponseObject); ok {
		return validResponse.VisitOAuthInterfaceAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfacePostAuthorize operation middleware
func (sh *strictHandler) OAuthInterfacePostAuthorize(ctx echo.Context) error {
	var request OAuthInterfacePostAuthorizeRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfacePostAuthorize(ctx.Request().Context(), request.(OAuthInterfacePostAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfacePostAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfacePostAuthorizeResponseObject); ok {
		return validResponse.VisitOAuthInterfacePostAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceGetToken operation middleware
func (sh *strictHandler) OAuthInterfaceGetToken(ctx echo.Context) error {
	var request OAuthInterfaceGetTokenRequestObject

	var body OAuthInterfaceGetTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceGetToken(ctx.Request().Context(), request.(OAuthInterfaceGetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceGetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceGetTokenResponseObject); ok {
		return validResponse.VisitOAuthInterfaceGetTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceLogout operation middleware
func (sh *strictHandler) SessionInterfaceLogout(ctx echo.Context) error {
	var request SessionInterfaceLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceLogout(ctx.Request().Context(), request.(SessionInterfaceLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceLogoutResponseObject); ok {
		return validResponse.VisitSessionInterfaceLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceMe operation middleware
func (sh *strictHandler) SessionInterfaceMe(ctx echo.Context) error {
	var request SessionInterfaceMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceMe(ctx.Request().Context(), request.(SessionInterfaceMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceMeResponseObject); ok {
		return validResponse.VisitSessionInterfaceMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceLogin operation middleware
func (sh *strictHandler) SessionInterfaceLogin(ctx echo.Context) error {
	var request SessionInterfaceLoginRequestObject

	var body SessionInterfaceLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceLogin(ctx.Request().Context(), request.(SessionInterfaceLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceLoginResponseObject); ok {
		return validResponse.VisitSessionInterfaceLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Signup operation middleware
func (sh *strictHandler) Signup(ctx echo.Context) error {
	var request SignupRequestObject

	var body SignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Signup(ctx.Request().Context(), request.(SignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SignupResponseObject); ok {
		return validResponse.VisitSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
