// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BasicAuthScopes  = "BasicAuth.Scopes"
)

// Defines values for ApprovalsApproveErr.
const (
	ApprovalsApproveErrInvalidClient ApprovalsApproveErr = "invalid_client"
	ApprovalsApproveErrInvalidScope  ApprovalsApproveErr = "invalid_scope"
)

// Defines values for ClientsGetClientErr.
const (
	ClientNotFound ClientsGetClientErr = "client_not_found"
)

// Defines values for OAuthAuthorizeErr.
const (
	OAuthAuthorizeErrAccessDenied            OAuthAuthorizeErr = "access_denied"
	OAuthAuthorizeErrInvalidRequest          OAuthAuthorizeErr = "invalid_request"
	OAuthAuthorizeErrInvalidScope            OAuthAuthorizeErr = "invalid_scope"
	OAuthAuthorizeErrServerError             OAuthAuthorizeErr = "server_error"
	OAuthAuthorizeErrTemporarilyUnavailable  OAuthAuthorizeErr = "temporarily_unavailable"
	OAuthAuthorizeErrUnauthorizedClient      OAuthAuthorizeErr = "unauthorized_client"
	OAuthAuthorizeErrUnsupportedResponseType OAuthAuthorizeErr = "unsupported_response_type"
)

// Defines values for OAuthAuthorizeResponseType.
const (
	Code OAuthAuthorizeResponseType = "code"
)

// Defines values for OAuthTokenCacheControlHeader.
const (
	OAuthTokenCacheControlHeaderNoStore OAuthTokenCacheControlHeader = "no-store"
)

// Defines values for OAuthTokenErr.
const (
	InvalidRequest OAuthTokenErr = "invalid_request"
)

// Defines values for OAuthTokenGrantType.
const (
	AuthorizationCode OAuthTokenGrantType = "authorization_code"
)

// Defines values for OAuthTokenPragmaHeader.
const (
	OAuthTokenPragmaHeaderNoStore OAuthTokenPragmaHeader = "no-store"
)

// Defines values for OAuthTokenTokenType.
const (
	Bearer OAuthTokenTokenType = "Bearer"
)

// Defines values for SessionLoginErr.
const (
	InvalidNameOrPassword SessionLoginErr = "invalid_name_or_password"
)

// Defines values for SessionLogoutErr.
const (
	NotLoggedIn SessionLogoutErr = "not_logged_in"
)

// Defines values for UsersSignupErr.
const (
	NameAlreadyUsed              UsersSignupErr = "name_already_used"
	NameLengthNotEnough          UsersSignupErr = "name_length_not_enough"
	PasswordConfirmationNotMatch UsersSignupErr = "password_confirmation_not_match"
	PasswordLengthNotEnough      UsersSignupErr = "password_length_not_enough"
)

// AccountClientsCreateClientReq defines model for AccountClients.CreateClientReq.
type AccountClientsCreateClientReq struct {
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// AccountClientsCreatedClient defines model for AccountClients.CreatedClient.
type AccountClientsCreatedClient struct {
	Id           string   `json:"id"`
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
	Secret       string   `json:"secret"`
}

// AccountClientsUpdateClientReq defines model for AccountClients.UpdateClientReq.
type AccountClientsUpdateClientReq struct {
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ApprovalsApproveErr defines model for Approvals.ApproveErr.
type ApprovalsApproveErr string

// ApprovalsApproveReq defines model for Approvals.ApproveReq.
type ApprovalsApproveReq struct {
	ClientId string `json:"client_id"`
	Scope    string `json:"scope"`
}

// Client defines model for Client.
type Client struct {
	Id           string   `json:"id"`
	Name         string   `json:"name"`
	RedirectUrls []string `json:"redirect_urls"`
}

// ClientsGetClientErr defines model for Clients.GetClientErr.
type ClientsGetClientErr string

// ClientsGetClientRes defines model for Clients.GetClientRes.
type ClientsGetClientRes struct {
	Client PublicClient `json:"client"`
}

// OAuthAuthorizeErr defines model for OAuth.AuthorizeErr.
type OAuthAuthorizeErr string

// OAuthAuthorizeReqMultiPart defines model for OAuth.AuthorizeReqMultiPart.
type OAuthAuthorizeReqMultiPart struct {
	ClientId     string                     `json:"client_id"`
	RedirectUri  string                     `json:"redirect_uri"`
	ResponseType OAuthAuthorizeResponseType `json:"response_type"`
	Scope        string                     `json:"scope"`
	State        *string                    `json:"state,omitempty"`
}

// OAuthAuthorizeResponseType defines model for OAuth.AuthorizeResponseType.
type OAuthAuthorizeResponseType string

// OAuthTokenCacheControlHeader defines model for OAuth.TokenCacheControlHeader.
type OAuthTokenCacheControlHeader string

// OAuthTokenErr defines model for OAuth.TokenErr.
type OAuthTokenErr string

// OAuthTokenGrantType defines model for OAuth.TokenGrantType.
type OAuthTokenGrantType string

// OAuthTokenPragmaHeader defines model for OAuth.TokenPragmaHeader.
type OAuthTokenPragmaHeader string

// OAuthTokenReq defines model for OAuth.TokenReq.
type OAuthTokenReq struct {
	ClientId    string              `json:"client_id"`
	Code        string              `json:"code"`
	GrantType   OAuthTokenGrantType `json:"grant_type"`
	RedirectUri string              `json:"redirect_uri"`
}

// OAuthTokenRes defines model for OAuth.TokenRes.
type OAuthTokenRes struct {
	AccessToken string              `json:"access_token"`
	ExpiresIn   int32               `json:"expires_in"`
	IdToken     *string             `json:"id_token,omitempty"`
	TokenType   OAuthTokenTokenType `json:"token_type"`
}

// OAuthTokenTokenType defines model for OAuth.TokenTokenType.
type OAuthTokenTokenType string

// PublicClient defines model for PublicClient.
type PublicClient struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// SessionLoginErr defines model for Session.LoginErr.
type SessionLoginErr string

// SessionLoginReq defines model for Session.LoginReq.
type SessionLoginReq struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// SessionLogoutErr defines model for Session.LogoutErr.
type SessionLogoutErr string

// SessionMeRes defines model for Session.MeRes.
type SessionMeRes struct {
	User *User `json:"user"`
}

// User defines model for User.
type User struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// UsersReqSignup defines model for Users.ReqSignup.
type UsersReqSignup struct {
	Name                 string `json:"name"`
	Password             string `json:"password"`
	PasswordConfirmation string `json:"password_confirmation"`
}

// UsersSignupErr defines model for Users.SignupErr.
type UsersSignupErr string

// AccountClientsCreateClientJSONBody defines parameters for AccountClientsCreateClient.
type AccountClientsCreateClientJSONBody struct {
	Client AccountClientsCreateClientReq `json:"client"`
}

// AccountClientsUpdateClientJSONBody defines parameters for AccountClientsUpdateClient.
type AccountClientsUpdateClientJSONBody struct {
	Client AccountClientsUpdateClientReq `json:"client"`
}

// OAuthInterfaceAuthorizeParams defines parameters for OAuthInterfaceAuthorize.
type OAuthInterfaceAuthorizeParams struct {
	ResponseType OAuthAuthorizeResponseType `form:"response_type" json:"response_type"`
	ClientId     string                     `form:"client_id" json:"client_id"`
	RedirectUri  string                     `form:"redirect_uri" json:"redirect_uri"`
	Scope        string                     `form:"scope" json:"scope"`
	State        *string                    `form:"state,omitempty" json:"state,omitempty"`
}

// OAuthInterfaceGetTokenParams defines parameters for OAuthInterfaceGetToken.
type OAuthInterfaceGetTokenParams struct {
	Authorization string `json:"authorization"`
}

// ApprovalsInterfaceApproveJSONRequestBody defines body for ApprovalsInterfaceApprove for application/json ContentType.
type ApprovalsInterfaceApproveJSONRequestBody = ApprovalsApproveReq

// AccountClientsCreateClientJSONRequestBody defines body for AccountClientsCreateClient for application/json ContentType.
type AccountClientsCreateClientJSONRequestBody AccountClientsCreateClientJSONBody

// AccountClientsUpdateClientJSONRequestBody defines body for AccountClientsUpdateClient for application/json ContentType.
type AccountClientsUpdateClientJSONRequestBody AccountClientsUpdateClientJSONBody

// OAuthInterfacePostAuthorizeMultipartRequestBody defines body for OAuthInterfacePostAuthorize for multipart/form-data ContentType.
type OAuthInterfacePostAuthorizeMultipartRequestBody = OAuthAuthorizeReqMultiPart

// OAuthInterfaceGetTokenFormdataRequestBody defines body for OAuthInterfaceGetToken for application/x-www-form-urlencoded ContentType.
type OAuthInterfaceGetTokenFormdataRequestBody = OAuthTokenReq

// SessionInterfaceLoginJSONRequestBody defines body for SessionInterfaceLogin for application/json ContentType.
type SessionInterfaceLoginJSONRequestBody = SessionLoginReq

// UsersInterfaceSignupJSONRequestBody defines body for UsersInterfaceSignup for application/json ContentType.
type UsersInterfaceSignupJSONRequestBody = UsersReqSignup

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx echo.Context) error
	// Get all clients
	// (GET /account/clients)
	AccountClientsListClients(ctx echo.Context) error
	// Create a new client
	// (POST /account/clients)
	AccountClientsCreateClient(ctx echo.Context) error
	// Delete a client
	// (DELETE /account/clients/{id})
	AccountClientsDeleteClient(ctx echo.Context, id string) error
	// Get a client
	// (GET /account/clients/{id})
	AccountClientsGetClient(ctx echo.Context, id string) error
	// Update a client
	// (POST /account/clients/{id})
	AccountClientsUpdateClient(ctx echo.Context, id string) error
	// Get a client
	// (GET /clients/{id})
	ClientsInterfaceGetClient(ctx echo.Context, id string) error
	// Check health
	// (GET /healthz)
	HealthzCheck(ctx echo.Context) error
	// Authorization Request
	// (GET /oauth/authorize)
	OAuthInterfaceAuthorize(ctx echo.Context, params OAuthInterfaceAuthorizeParams) error
	// Authorization Request
	// (POST /oauth/authorize)
	OAuthInterfacePostAuthorize(ctx echo.Context) error
	// Get JSON Web Key Set
	// (GET /oauth/jwks)
	OAuthInterfaceGetJwks(ctx echo.Context) error
	// Get token
	// (POST /oauth/token)
	OAuthInterfaceGetToken(ctx echo.Context, params OAuthInterfaceGetTokenParams) error
	// Logout
	// (DELETE /session)
	SessionInterfaceLogout(ctx echo.Context) error
	// Get session
	// (GET /session)
	SessionInterfaceMe(ctx echo.Context) error
	// Login
	// (POST /session)
	SessionInterfaceLogin(ctx echo.Context) error
	// Signup
	// (POST /users/signup)
	UsersInterfaceSignup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApprovalsInterfaceApprove converts echo context to params.
func (w *ServerInterfaceWrapper) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApprovalsInterfaceApprove(ctx)
	return err
}

// AccountClientsListClients converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsListClients(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsListClients(ctx)
	return err
}

// AccountClientsCreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsCreateClient(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsCreateClient(ctx)
	return err
}

// AccountClientsDeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsDeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsDeleteClient(ctx, id)
	return err
}

// AccountClientsGetClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsGetClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsGetClient(ctx, id)
	return err
}

// AccountClientsUpdateClient converts echo context to params.
func (w *ServerInterfaceWrapper) AccountClientsUpdateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountClientsUpdateClient(ctx, id)
	return err
}

// ClientsInterfaceGetClient converts echo context to params.
func (w *ServerInterfaceWrapper) ClientsInterfaceGetClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClientsInterfaceGetClient(ctx, id)
	return err
}

// HealthzCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthzCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthzCheck(ctx)
	return err
}

// OAuthInterfaceAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceAuthorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OAuthInterfaceAuthorizeParams
	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", false, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", false, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", false, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceAuthorize(ctx, params)
	return err
}

// OAuthInterfacePostAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfacePostAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfacePostAuthorize(ctx)
	return err
}

// OAuthInterfaceGetJwks converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceGetJwks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceGetJwks(ctx)
	return err
}

// OAuthInterfaceGetToken converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthInterfaceGetToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OAuthInterfaceGetTokenParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthInterfaceGetToken(ctx, params)
	return err
}

// SessionInterfaceLogout converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceLogout(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceLogout(ctx)
	return err
}

// SessionInterfaceMe converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceMe(ctx)
	return err
}

// SessionInterfaceLogin converts echo context to params.
func (w *ServerInterfaceWrapper) SessionInterfaceLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SessionInterfaceLogin(ctx)
	return err
}

// UsersInterfaceSignup converts echo context to params.
func (w *ServerInterfaceWrapper) UsersInterfaceSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersInterfaceSignup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/account/approvals", wrapper.ApprovalsInterfaceApprove)
	router.GET(baseURL+"/account/clients", wrapper.AccountClientsListClients)
	router.POST(baseURL+"/account/clients", wrapper.AccountClientsCreateClient)
	router.DELETE(baseURL+"/account/clients/:id", wrapper.AccountClientsDeleteClient)
	router.GET(baseURL+"/account/clients/:id", wrapper.AccountClientsGetClient)
	router.POST(baseURL+"/account/clients/:id", wrapper.AccountClientsUpdateClient)
	router.GET(baseURL+"/clients/:id", wrapper.ClientsInterfaceGetClient)
	router.GET(baseURL+"/healthz", wrapper.HealthzCheck)
	router.GET(baseURL+"/oauth/authorize", wrapper.OAuthInterfaceAuthorize)
	router.POST(baseURL+"/oauth/authorize", wrapper.OAuthInterfacePostAuthorize)
	router.GET(baseURL+"/oauth/jwks", wrapper.OAuthInterfaceGetJwks)
	router.POST(baseURL+"/oauth/token", wrapper.OAuthInterfaceGetToken)
	router.DELETE(baseURL+"/session", wrapper.SessionInterfaceLogout)
	router.GET(baseURL+"/session", wrapper.SessionInterfaceMe)
	router.POST(baseURL+"/session", wrapper.SessionInterfaceLogin)
	router.POST(baseURL+"/users/signup", wrapper.UsersInterfaceSignup)

}

type ApprovalsInterfaceApproveRequestObject struct {
	Body *ApprovalsInterfaceApproveJSONRequestBody
}

type ApprovalsInterfaceApproveResponseObject interface {
	VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error
}

type ApprovalsInterfaceApprove204Response struct {
}

func (response ApprovalsInterfaceApprove204Response) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApprovalsInterfaceApprove400JSONResponse struct {
	Error            ApprovalsApproveErr `json:"error"`
	ErrorDescription string              `json:"error_description"`
}

func (response ApprovalsInterfaceApprove400JSONResponse) VisitApprovalsInterfaceApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsListClientsRequestObject struct {
}

type AccountClientsListClientsResponseObject interface {
	VisitAccountClientsListClientsResponse(w http.ResponseWriter) error
}

type AccountClientsListClients200JSONResponse struct {
	Clients []Client `json:"clients"`
}

func (response AccountClientsListClients200JSONResponse) VisitAccountClientsListClientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsCreateClientRequestObject struct {
	Body *AccountClientsCreateClientJSONRequestBody
}

type AccountClientsCreateClientResponseObject interface {
	VisitAccountClientsCreateClientResponse(w http.ResponseWriter) error
}

type AccountClientsCreateClient201JSONResponse struct {
	Client AccountClientsCreatedClient `json:"client"`
}

func (response AccountClientsCreateClient201JSONResponse) VisitAccountClientsCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsCreateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsCreateClient400JSONResponse) VisitAccountClientsCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsDeleteClientRequestObject struct {
	Id string `json:"id"`
}

type AccountClientsDeleteClientResponseObject interface {
	VisitAccountClientsDeleteClientResponse(w http.ResponseWriter) error
}

type AccountClientsDeleteClient204Response struct {
}

func (response AccountClientsDeleteClient204Response) VisitAccountClientsDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AccountClientsDeleteClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsDeleteClient400JSONResponse) VisitAccountClientsDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsGetClientRequestObject struct {
	Id string `json:"id"`
}

type AccountClientsGetClientResponseObject interface {
	VisitAccountClientsGetClientResponse(w http.ResponseWriter) error
}

type AccountClientsGetClient200JSONResponse struct {
	Client Client `json:"client"`
}

func (response AccountClientsGetClient200JSONResponse) VisitAccountClientsGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsGetClient404JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsGetClient404JSONResponse) VisitAccountClientsGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AccountClientsUpdateClientRequestObject struct {
	Id   string `json:"id"`
	Body *AccountClientsUpdateClientJSONRequestBody
}

type AccountClientsUpdateClientResponseObject interface {
	VisitAccountClientsUpdateClientResponse(w http.ResponseWriter) error
}

type AccountClientsUpdateClient204Response struct {
}

func (response AccountClientsUpdateClient204Response) VisitAccountClientsUpdateClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AccountClientsUpdateClient400JSONResponse struct {
	Error string `json:"error"`
}

func (response AccountClientsUpdateClient400JSONResponse) VisitAccountClientsUpdateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClientsInterfaceGetClientRequestObject struct {
	Id string `json:"id"`
}

type ClientsInterfaceGetClientResponseObject interface {
	VisitClientsInterfaceGetClientResponse(w http.ResponseWriter) error
}

type ClientsInterfaceGetClient200JSONResponse ClientsGetClientRes

func (response ClientsInterfaceGetClient200JSONResponse) VisitClientsInterfaceGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientsInterfaceGetClient400JSONResponse struct {
	Error            ClientsGetClientErr `json:"error"`
	ErrorDescription string              `json:"error_description"`
}

func (response ClientsInterfaceGetClient400JSONResponse) VisitClientsInterfaceGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HealthzCheckRequestObject struct {
}

type HealthzCheckResponseObject interface {
	VisitHealthzCheckResponse(w http.ResponseWriter) error
}

type HealthzCheck200Response struct {
}

func (response HealthzCheck200Response) VisitHealthzCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OAuthInterfaceAuthorizeRequestObject struct {
	Params OAuthInterfaceAuthorizeParams
}

type OAuthInterfaceAuthorizeResponseObject interface {
	VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error
}

type OAuthInterfaceAuthorize204Response struct {
}

func (response OAuthInterfaceAuthorize204Response) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OAuthInterfaceAuthorize302ResponseHeaders struct {
	Location string
}

type OAuthInterfaceAuthorize302Response struct {
	Headers OAuthInterfaceAuthorize302ResponseHeaders
}

func (response OAuthInterfaceAuthorize302Response) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type OAuthInterfaceAuthorize400JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfaceAuthorize400JSONResponse) VisitOAuthInterfaceAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfacePostAuthorizeRequestObject struct {
	Body *multipart.Reader
}

type OAuthInterfacePostAuthorizeResponseObject interface {
	VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error
}

type OAuthInterfacePostAuthorize204Response struct {
}

func (response OAuthInterfacePostAuthorize204Response) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type OAuthInterfacePostAuthorize302ResponseHeaders struct {
	Location string
}

type OAuthInterfacePostAuthorize302Response struct {
	Headers OAuthInterfacePostAuthorize302ResponseHeaders
}

func (response OAuthInterfacePostAuthorize302Response) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type OAuthInterfacePostAuthorize400JSONResponse struct {
	Error            OAuthAuthorizeErr `json:"error"`
	ErrorDescription string            `json:"error_description"`
	State            *string           `json:"state,omitempty"`
}

func (response OAuthInterfacePostAuthorize400JSONResponse) VisitOAuthInterfacePostAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceGetJwksRequestObject struct {
}

type OAuthInterfaceGetJwksResponseObject interface {
	VisitOAuthInterfaceGetJwksResponse(w http.ResponseWriter) error
}

type OAuthInterfaceGetJwks200JSONResponse map[string]interface{}

func (response OAuthInterfaceGetJwks200JSONResponse) VisitOAuthInterfaceGetJwksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthInterfaceGetTokenRequestObject struct {
	Params OAuthInterfaceGetTokenParams
	Body   *OAuthInterfaceGetTokenFormdataRequestBody
}

type OAuthInterfaceGetTokenResponseObject interface {
	VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error
}

type OAuthInterfaceGetToken200ResponseHeaders struct {
	CacheControl OAuthTokenCacheControlHeader
	Pragma       OAuthTokenPragmaHeader
}

type OAuthInterfaceGetToken200JSONResponse struct {
	Body    OAuthTokenRes
	Headers OAuthInterfaceGetToken200ResponseHeaders
}

func (response OAuthInterfaceGetToken200JSONResponse) VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("cache-control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("pragma", fmt.Sprint(response.Headers.Pragma))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthInterfaceGetToken400JSONResponse struct {
	Error            OAuthTokenErr `json:"error"`
	ErrorDescription string        `json:"error_description"`
}

func (response OAuthInterfaceGetToken400JSONResponse) VisitOAuthInterfaceGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceLogoutRequestObject struct {
}

type SessionInterfaceLogoutResponseObject interface {
	VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error
}

type SessionInterfaceLogout204ResponseHeaders struct {
	SetCookie string
}

type SessionInterfaceLogout204Response struct {
	Headers SessionInterfaceLogout204ResponseHeaders
}

func (response SessionInterfaceLogout204Response) VisitSessionInterfaceLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type SessionInterfaceMeRequestObject struct {
}

type SessionInterfaceMeResponseObject interface {
	VisitSessionInterfaceMeResponse(w http.ResponseWriter) error
}

type SessionInterfaceMe200JSONResponse SessionMeRes

func (response SessionInterfaceMe200JSONResponse) VisitSessionInterfaceMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SessionInterfaceLoginRequestObject struct {
	Body *SessionInterfaceLoginJSONRequestBody
}

type SessionInterfaceLoginResponseObject interface {
	VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error
}

type SessionInterfaceLogin204ResponseHeaders struct {
	SetCookie string
}

type SessionInterfaceLogin204Response struct {
	Headers SessionInterfaceLogin204ResponseHeaders
}

func (response SessionInterfaceLogin204Response) VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type SessionInterfaceLogin400JSONResponse struct {
	Error            SessionLoginErr `json:"error"`
	ErrorDescription string          `json:"error_description"`
}

func (response SessionInterfaceLogin400JSONResponse) VisitSessionInterfaceLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UsersInterfaceSignupRequestObject struct {
	Body *UsersInterfaceSignupJSONRequestBody
}

type UsersInterfaceSignupResponseObject interface {
	VisitUsersInterfaceSignupResponse(w http.ResponseWriter) error
}

type UsersInterfaceSignup204ResponseHeaders struct {
	SetCookie string
}

type UsersInterfaceSignup204Response struct {
	Headers UsersInterfaceSignup204ResponseHeaders
}

func (response UsersInterfaceSignup204Response) VisitUsersInterfaceSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("set-cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type UsersInterfaceSignup400JSONResponse struct {
	Error            UsersSignupErr `json:"error"`
	ErrorDescription string         `json:"error_description"`
}

func (response UsersInterfaceSignup400JSONResponse) VisitUsersInterfaceSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Approve a auth request
	// (POST /account/approvals)
	ApprovalsInterfaceApprove(ctx context.Context, request ApprovalsInterfaceApproveRequestObject) (ApprovalsInterfaceApproveResponseObject, error)
	// Get all clients
	// (GET /account/clients)
	AccountClientsListClients(ctx context.Context, request AccountClientsListClientsRequestObject) (AccountClientsListClientsResponseObject, error)
	// Create a new client
	// (POST /account/clients)
	AccountClientsCreateClient(ctx context.Context, request AccountClientsCreateClientRequestObject) (AccountClientsCreateClientResponseObject, error)
	// Delete a client
	// (DELETE /account/clients/{id})
	AccountClientsDeleteClient(ctx context.Context, request AccountClientsDeleteClientRequestObject) (AccountClientsDeleteClientResponseObject, error)
	// Get a client
	// (GET /account/clients/{id})
	AccountClientsGetClient(ctx context.Context, request AccountClientsGetClientRequestObject) (AccountClientsGetClientResponseObject, error)
	// Update a client
	// (POST /account/clients/{id})
	AccountClientsUpdateClient(ctx context.Context, request AccountClientsUpdateClientRequestObject) (AccountClientsUpdateClientResponseObject, error)
	// Get a client
	// (GET /clients/{id})
	ClientsInterfaceGetClient(ctx context.Context, request ClientsInterfaceGetClientRequestObject) (ClientsInterfaceGetClientResponseObject, error)
	// Check health
	// (GET /healthz)
	HealthzCheck(ctx context.Context, request HealthzCheckRequestObject) (HealthzCheckResponseObject, error)
	// Authorization Request
	// (GET /oauth/authorize)
	OAuthInterfaceAuthorize(ctx context.Context, request OAuthInterfaceAuthorizeRequestObject) (OAuthInterfaceAuthorizeResponseObject, error)
	// Authorization Request
	// (POST /oauth/authorize)
	OAuthInterfacePostAuthorize(ctx context.Context, request OAuthInterfacePostAuthorizeRequestObject) (OAuthInterfacePostAuthorizeResponseObject, error)
	// Get JSON Web Key Set
	// (GET /oauth/jwks)
	OAuthInterfaceGetJwks(ctx context.Context, request OAuthInterfaceGetJwksRequestObject) (OAuthInterfaceGetJwksResponseObject, error)
	// Get token
	// (POST /oauth/token)
	OAuthInterfaceGetToken(ctx context.Context, request OAuthInterfaceGetTokenRequestObject) (OAuthInterfaceGetTokenResponseObject, error)
	// Logout
	// (DELETE /session)
	SessionInterfaceLogout(ctx context.Context, request SessionInterfaceLogoutRequestObject) (SessionInterfaceLogoutResponseObject, error)
	// Get session
	// (GET /session)
	SessionInterfaceMe(ctx context.Context, request SessionInterfaceMeRequestObject) (SessionInterfaceMeResponseObject, error)
	// Login
	// (POST /session)
	SessionInterfaceLogin(ctx context.Context, request SessionInterfaceLoginRequestObject) (SessionInterfaceLoginResponseObject, error)
	// Signup
	// (POST /users/signup)
	UsersInterfaceSignup(ctx context.Context, request UsersInterfaceSignupRequestObject) (UsersInterfaceSignupResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ApprovalsInterfaceApprove operation middleware
func (sh *strictHandler) ApprovalsInterfaceApprove(ctx echo.Context) error {
	var request ApprovalsInterfaceApproveRequestObject

	var body ApprovalsInterfaceApproveJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApprovalsInterfaceApprove(ctx.Request().Context(), request.(ApprovalsInterfaceApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApprovalsInterfaceApprove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApprovalsInterfaceApproveResponseObject); ok {
		return validResponse.VisitApprovalsInterfaceApproveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsListClients operation middleware
func (sh *strictHandler) AccountClientsListClients(ctx echo.Context) error {
	var request AccountClientsListClientsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsListClients(ctx.Request().Context(), request.(AccountClientsListClientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsListClients")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsListClientsResponseObject); ok {
		return validResponse.VisitAccountClientsListClientsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsCreateClient operation middleware
func (sh *strictHandler) AccountClientsCreateClient(ctx echo.Context) error {
	var request AccountClientsCreateClientRequestObject

	var body AccountClientsCreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsCreateClient(ctx.Request().Context(), request.(AccountClientsCreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsCreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsCreateClientResponseObject); ok {
		return validResponse.VisitAccountClientsCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsDeleteClient operation middleware
func (sh *strictHandler) AccountClientsDeleteClient(ctx echo.Context, id string) error {
	var request AccountClientsDeleteClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsDeleteClient(ctx.Request().Context(), request.(AccountClientsDeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsDeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsDeleteClientResponseObject); ok {
		return validResponse.VisitAccountClientsDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsGetClient operation middleware
func (sh *strictHandler) AccountClientsGetClient(ctx echo.Context, id string) error {
	var request AccountClientsGetClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsGetClient(ctx.Request().Context(), request.(AccountClientsGetClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsGetClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsGetClientResponseObject); ok {
		return validResponse.VisitAccountClientsGetClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountClientsUpdateClient operation middleware
func (sh *strictHandler) AccountClientsUpdateClient(ctx echo.Context, id string) error {
	var request AccountClientsUpdateClientRequestObject

	request.Id = id

	var body AccountClientsUpdateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountClientsUpdateClient(ctx.Request().Context(), request.(AccountClientsUpdateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountClientsUpdateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountClientsUpdateClientResponseObject); ok {
		return validResponse.VisitAccountClientsUpdateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClientsInterfaceGetClient operation middleware
func (sh *strictHandler) ClientsInterfaceGetClient(ctx echo.Context, id string) error {
	var request ClientsInterfaceGetClientRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsInterfaceGetClient(ctx.Request().Context(), request.(ClientsInterfaceGetClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsInterfaceGetClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClientsInterfaceGetClientResponseObject); ok {
		return validResponse.VisitClientsInterfaceGetClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HealthzCheck operation middleware
func (sh *strictHandler) HealthzCheck(ctx echo.Context) error {
	var request HealthzCheckRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthzCheck(ctx.Request().Context(), request.(HealthzCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthzCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthzCheckResponseObject); ok {
		return validResponse.VisitHealthzCheckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceAuthorize operation middleware
func (sh *strictHandler) OAuthInterfaceAuthorize(ctx echo.Context, params OAuthInterfaceAuthorizeParams) error {
	var request OAuthInterfaceAuthorizeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceAuthorize(ctx.Request().Context(), request.(OAuthInterfaceAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceAuthorizeResponseObject); ok {
		return validResponse.VisitOAuthInterfaceAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfacePostAuthorize operation middleware
func (sh *strictHandler) OAuthInterfacePostAuthorize(ctx echo.Context) error {
	var request OAuthInterfacePostAuthorizeRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfacePostAuthorize(ctx.Request().Context(), request.(OAuthInterfacePostAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfacePostAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfacePostAuthorizeResponseObject); ok {
		return validResponse.VisitOAuthInterfacePostAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceGetJwks operation middleware
func (sh *strictHandler) OAuthInterfaceGetJwks(ctx echo.Context) error {
	var request OAuthInterfaceGetJwksRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceGetJwks(ctx.Request().Context(), request.(OAuthInterfaceGetJwksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceGetJwks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceGetJwksResponseObject); ok {
		return validResponse.VisitOAuthInterfaceGetJwksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthInterfaceGetToken operation middleware
func (sh *strictHandler) OAuthInterfaceGetToken(ctx echo.Context, params OAuthInterfaceGetTokenParams) error {
	var request OAuthInterfaceGetTokenRequestObject

	request.Params = params

	if form, err := ctx.FormParams(); err == nil {
		var body OAuthInterfaceGetTokenFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthInterfaceGetToken(ctx.Request().Context(), request.(OAuthInterfaceGetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthInterfaceGetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthInterfaceGetTokenResponseObject); ok {
		return validResponse.VisitOAuthInterfaceGetTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceLogout operation middleware
func (sh *strictHandler) SessionInterfaceLogout(ctx echo.Context) error {
	var request SessionInterfaceLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceLogout(ctx.Request().Context(), request.(SessionInterfaceLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceLogoutResponseObject); ok {
		return validResponse.VisitSessionInterfaceLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceMe operation middleware
func (sh *strictHandler) SessionInterfaceMe(ctx echo.Context) error {
	var request SessionInterfaceMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceMe(ctx.Request().Context(), request.(SessionInterfaceMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceMeResponseObject); ok {
		return validResponse.VisitSessionInterfaceMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SessionInterfaceLogin operation middleware
func (sh *strictHandler) SessionInterfaceLogin(ctx echo.Context) error {
	var request SessionInterfaceLoginRequestObject

	var body SessionInterfaceLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SessionInterfaceLogin(ctx.Request().Context(), request.(SessionInterfaceLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SessionInterfaceLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SessionInterfaceLoginResponseObject); ok {
		return validResponse.VisitSessionInterfaceLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UsersInterfaceSignup operation middleware
func (sh *strictHandler) UsersInterfaceSignup(ctx echo.Context) error {
	var request UsersInterfaceSignupRequestObject

	var body UsersInterfaceSignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UsersInterfaceSignup(ctx.Request().Context(), request.(UsersInterfaceSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersInterfaceSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UsersInterfaceSignupResponseObject); ok {
		return validResponse.VisitUsersInterfaceSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
